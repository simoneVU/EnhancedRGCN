/// <reference types="node" />
import { HttpMethodTemplate, RequestTemplate } from "@triply/utils/lib/Routes";
import App from "./App";
import { TriplyDbJsError } from "./utils/Error";
declare type ReqMethod = "GET" | "PUT" | "PATCH" | "DELETE" | "POST";
export interface ReqOptsObj<E extends RequestTemplate = any> {
    app: App;
    errorWithCleanerStack: TriplyDbJsError;
    url?: string;
    path?: string;
    query?: E["Query"];
    data?: E["Body"];
    attach?: {
        [name: string]: Buffer | string | File;
    };
    expectedResponseBody?: "empty" | "json" | "buffer";
}
export declare function normalizePath(path?: string): string;
export declare function getUrl(opts: ReqOptsObj): string;
export declare function _get<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _delete<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _post<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function _patch<T extends HttpMethodTemplate>(opts: ReqOptsObj<T["Req"]>): Promise<T["Res"]["Body"]>;
export declare function getRequestConfig(method: ReqMethod, config: ReqOptsObj): RequestInit;
export declare function handleFetchAsStream<T extends HttpMethodTemplate>(method: ReqMethod, opts: ReqOptsObj<T["Req"]>): Promise<ReadableStream<Uint8Array>>;
export {};
