/// <reference types="node" />
import Query from "./Query";
import { Models } from "@triply/utils";
import AsyncIteratorHelper from "./utils/AsyncIteratorHelper";
import Story from "./Story";
import { Account } from "./Account";
import Dataset from "./Dataset";
import { MarkRequired } from "ts-essentials";
import { NewDataset } from "@triply/utils/lib/Models";
export declare function getName<T extends Account>(this: T): Promise<string>;
export declare function addQuery<T extends Account>(this: T, query: Models.QueryCreate): Promise<Query>;
export declare function getQuery<T extends Account>(this: T, name: string): Promise<Query>;
export declare function getQueries<T extends Account>(this: T): AsyncIteratorHelper<Models.Query, Query>;
export declare function getStory<T extends Account>(this: T, name: string): Promise<Story>;
export declare function getStories<T extends Account>(this: T): AsyncIteratorHelper<Models.Story, Story>;
export declare function getDatasets<T extends Account>(this: T): AsyncIteratorHelper<Models.DatasetPublic, Dataset>;
export declare function addDataset<T extends Account>(this: T, ds: MarkRequired<Models.NewDataset, "name">): Promise<Dataset>;
export declare function getPinnedItems<T extends Account>(this: T): Promise<Array<Dataset | Story | Query>>;
export declare function pinItems<T extends Account>(this: T, items: Array<Dataset | Story | Query>): Promise<T>;
export declare function exists<T extends Account>(this: T): Promise<boolean>;
export declare function getDataset<T extends Account>(this: T, ds: string): Dataset;
export declare function update<T extends Account>(this: T, updateObj: Omit<Models.AccountUpdate, "pinnedDatasets">): Promise<T>;
export declare function setAvatar<T extends Account>(this: T, pathBufferOrFile: string | Buffer | File): Promise<void>;
export declare function ensureDs<T extends Account>(this: T, name: string, newDsInfo?: Partial<Omit<NewDataset, "name">>): Promise<Dataset>;
