import { TriplyDbJsError } from "./Error";
import App from "../App";
export interface AsyncConfig<ResultType, OutputType> {
    getUrl: () => Promise<string>;
    mapResult: (resource: ResultType) => Promise<OutputType>;
    app: App;
    error: TriplyDbJsError;
    getErrorMessage: () => Promise<string>;
    parsePage?: (page: string) => Promise<ResultType[]>;
}
export default class AsyncIteratorHelper<ResultType, OutputClass> {
    private _next;
    private _config;
    private _currentPage;
    private _page;
    constructor(conf: AsyncConfig<ResultType, OutputClass>);
    private _getNextPage;
    private _get;
    toArray(): Promise<OutputClass[]>;
    [Symbol.asyncIterator](): {
        next: () => Promise<{
            done: boolean;
            value: OutputClass;
        } | {
            readonly done: true;
            value?: undefined;
        }>;
    };
}
