#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const colors_1 = __importDefault(require("colors"));
const App_1 = __importDefault(require("../App"));
let defaultTriplyDBToken = process.env["TRIPLYDB_TOKEN"];
let defaultTriplyDBAccount = process.env["TRIPLYDB_ACCOUNT"];
let defaultTriplyDBDataset = process.env["TRIPLYDB_DATASET"];
const command = commander_1.default
    .createCommand("upload-asset")
    .description("load files as assets into a TriplyDB dataset")
    .option("-d, --dataset <dataset>", "Dataset to upload file(s) to (default: $TRIPLYDB_DATASET)", defaultTriplyDBDataset || undefined)
    .option("-t, --token <token>", "TriplyDB access token (default: $TRIPLYDB_TOKEN)", defaultTriplyDBToken || undefined)
    .option("-a, --account <account>", "Optional: Account to upload file(s) for. (default: the account that owns the token, or $TRIPLYDB_ACCOUNT)", defaultTriplyDBAccount)
    .option("-u, --url <url>", "Optional: Url of the triply API. (default: the API where the token was created)", String)
    .action(async () => {
    function sanityCheckError(msg) {
        console.error(colors_1.default.red(msg));
        command.outputHelp();
        process.exit(1);
    }
    const files = command.args;
    const options = command.opts();
    if (!options.token)
        sanityCheckError("Missing token as argument");
    if (!options.dataset)
        sanityCheckError("Missing dataset as argument");
    if (!files.length)
        sanityCheckError("No files given to upload for");
    const c = App_1.default.get({ url: options.url, token: options.token });
    const account = await c.getAccount(options.account);
    await account.getInfo();
    let dataset;
    try {
        dataset = account.getDataset(options.dataset);
        await dataset.getInfo();
    }
    catch (_a) {
        console.info("Creating dataset");
        dataset = await account.addDataset({ name: options.dataset, accessLevel: "public" });
    }
    console.info(`Uploading ${files.length} files`);
    for (const file of files) {
        const filename = file.indexOf("/") === -1 ? file : file.split("/").pop();
        await dataset.uploadAsset(file, filename || "unknown");
        console.info("Uploaded", filename);
    }
    console.info("Done");
});
exports.default = command;
//# sourceMappingURL=triplydb-upload-asset.js.map