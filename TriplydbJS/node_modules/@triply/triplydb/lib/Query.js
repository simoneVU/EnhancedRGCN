"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const RequestHandler_1 = require("./RequestHandler");
const Error_1 = require("./utils/Error");
const AsyncIteratorHelper_1 = __importDefault(require("./utils/AsyncIteratorHelper"));
const n3 = __importStar(require("n3"));
const sparqljs_1 = __importDefault(require("sparqljs"));
const query_string_1 = require("query-string");
const AsyncIteratorHelperWithToFile_1 = __importDefault(require("./utils/AsyncIteratorHelperWithToFile"));
class Query {
    constructor(app, info, owner) {
        this._app = app;
        this._info = info;
        this._owner = owner;
    }
    _getQueryType() {
        var _a;
        const queryString = (_a = this["_info"].requestConfig) === null || _a === void 0 ? void 0 : _a.payload.query;
        if (!queryString)
            throw Error_1.getErr(`Query ${this._info.name} has no versions.`);
        const parser = new sparqljs_1.default.Parser();
        const parsed = parser.parse(queryString);
        if (parsed.type === "query") {
            return parsed.queryType;
        }
        else {
            throw Error_1.getErr("Update-queries are not supported");
        }
    }
    async _getPath() {
        const ownerName = await this._owner.getName();
        return "/queries/" + ownerName + "/" + this._info.name;
    }
    async _getQueryNameWithOwner() {
        const ownerName = await this._owner.getName();
        return `${ownerName}/${this._info.name}`;
    }
    async getInfo(refresh = false) {
        if (!refresh && this._info)
            return this._info;
        this._info = (await RequestHandler_1._get({
            errorWithCleanerStack: Error_1.getErr(`Failed to get information of query ${await this._getQueryNameWithOwner()}.`),
            app: this._app,
            path: await this._getPath(),
        }));
        return this._info;
    }
    _setInfo(info) {
        this._info = info;
        return this;
    }
    async update(config) {
        var _a;
        const updateData = Object.assign({}, config);
        if (!updateData.dataset) {
            updateData.dataset = (_a = this._info.dataset) === null || _a === void 0 ? void 0 : _a.id;
        }
        this._setInfo(await RequestHandler_1._patch({
            errorWithCleanerStack: Error_1.getErr(`Failed to update query information of ${this._info.name}.`),
            app: this._app,
            path: await this._getPath(),
            data: updateData,
        }));
        return this;
    }
    async delete() {
        await RequestHandler_1._delete({
            errorWithCleanerStack: Error_1.getErr(`Failed to delete query ${this._info.name}.`),
            app: this._app,
            path: await this._getPath(),
            expectedResponseBody: "empty",
        });
    }
    results(variableValues) {
        const queryType = this._getQueryType();
        const queryString = query_string_1.stringify(Object.assign({ page: 1, pageSize: 5000 }, (variableValues || {})));
        const iteratorOptions = {
            error: Error_1.getErr(`Failed to run query`),
            getErrorMessage: async () => `Failed to get results for query ${await this.getInfo().then((i) => i.name)}.`,
            app: this._app,
        };
        return {
            statements: () => {
                if (queryType !== "CONSTRUCT" && queryType !== "DESCRIBE") {
                    throw Error_1.getErr("Statements are only supported for CONSTRUCT and DESCRIBE queries.");
                }
                const parser = new n3.Parser();
                return new AsyncIteratorHelperWithToFile_1.default(Object.assign(Object.assign({}, iteratorOptions), { mapResult: async (result) => result, getUrl: async () => this._app["_config"].url + ((await this._getPath()) + "/run.ttl?" + queryString), parsePage: async (page) => {
                        if (page === "OK")
                            return [];
                        return parser.parse(page);
                    } }));
            },
            bindings: () => {
                if (queryType !== "SELECT") {
                    throw Error_1.getErr("Bindings are only supported for SELECT queries.");
                }
                return new AsyncIteratorHelper_1.default(Object.assign(Object.assign({}, iteratorOptions), { mapResult: async (result) => result, getUrl: async () => this._app["_config"].url + ((await this._getPath()) + "/run?" + queryString) }));
            },
        };
    }
}
exports.default = Query;
//# sourceMappingURL=Query.js.map