"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Org_1 = __importDefault(require("./Org"));
const RequestHandler_1 = require("./RequestHandler");
const commonAccountFunctions_1 = require("./commonAccountFunctions");
const Error_1 = require("./utils/Error");
class User {
    constructor(app, accountName, info) {
        this.getDataset = commonAccountFunctions_1.getDataset;
        this.exists = commonAccountFunctions_1.exists;
        this.update = commonAccountFunctions_1.update;
        this.setAvatar = commonAccountFunctions_1.setAvatar;
        this.getQuery = commonAccountFunctions_1.getQuery;
        this.getQueries = commonAccountFunctions_1.getQueries;
        this.getStory = commonAccountFunctions_1.getStory;
        this.getStories = commonAccountFunctions_1.getStories;
        this.addQuery = commonAccountFunctions_1.addQuery;
        this.getDatasets = commonAccountFunctions_1.getDatasets;
        this.addDataset = commonAccountFunctions_1.addDataset;
        this.getPinnedItems = commonAccountFunctions_1.getPinnedItems;
        this.pinItems = commonAccountFunctions_1.pinItems;
        this.getName = commonAccountFunctions_1.getName;
        this.ensureDs = commonAccountFunctions_1.ensureDs;
        this._app = app;
        this._name = accountName;
        this._info = info;
    }
    _setInfo(info) {
        this._info = info;
        this._name = info.accountName;
    }
    asUser() {
        return this;
    }
    asOrg() {
        var _a;
        throw Error_1.getErr(`${((_a = this._info) === null || _a === void 0 ? void 0 : _a.accountName) || "This"} is a user. Cannot fetch this as an organization.`);
    }
    async getInfo(refresh = false) {
        if (refresh || !this._info) {
            let errMsg;
            if (this._name) {
                errMsg = `Failed to get user information of ${this._name}.`;
            }
            else {
                errMsg = "Failed to get user information for this token.";
            }
            const info = (await RequestHandler_1._get({
                errorWithCleanerStack: Error_1.getErr(errMsg),
                app: this._app,
                path: this._name ? "/accounts/" + this._name : "/me",
                query: { verbose: "" },
            }));
            this._setInfo(info);
        }
        return this._info;
    }
    async createOrganization(info) {
        const newOrgJson = await RequestHandler_1._post({
            errorWithCleanerStack: Error_1.getErr(`Failed to create organization ${info.accountName} and set ${this._name} as it's owner.`),
            app: this._app,
            path: "/accounts/" + this._name + "/orgs",
            data: info,
        });
        return new Org_1.default(this._app, newOrgJson.accountName, newOrgJson);
    }
    async getOrganizations() {
        const orgs = await RequestHandler_1._get({
            errorWithCleanerStack: Error_1.getErr(`Failed to get organizations of ${this._name}`),
            app: this._app,
            path: "/accounts/" + this._name + "/orgs",
        });
        return orgs.map((o) => {
            if (!o.accountName)
                throw Error_1.getErr("Expected accountname to exist for org");
            return new Org_1.default(this._app, o.accountName, o);
        });
    }
}
exports.default = User;
//# sourceMappingURL=User.js.map