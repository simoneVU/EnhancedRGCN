import { Models } from "@triply/utils";
import App from "./App";
import { AccountBase } from "./Account";
import Org from "./Org";
import { MarkRequired } from "ts-essentials";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, exists, update, getName, ensureDs } from "./commonAccountFunctions";
export default class User implements AccountBase {
    private _app;
    private _info?;
    private _name?;
    constructor(app: App, accountName?: string, info?: Models.User);
    getDataset: typeof getDataset;
    exists: typeof exists;
    update: typeof update;
    setAvatar: typeof setAvatar;
    getQuery: typeof getQuery;
    getQueries: typeof getQueries;
    getStory: typeof getStory;
    getStories: typeof getStories;
    addQuery: typeof addQuery;
    getDatasets: typeof getDatasets;
    addDataset: typeof addDataset;
    getPinnedItems: typeof getPinnedItems;
    pinItems: typeof pinItems;
    getName: typeof getName;
    ensureDs: typeof ensureDs;
    private _setInfo;
    asUser(): User;
    asOrg(): Org;
    getInfo(refresh?: boolean): Promise<Models.User>;
    createOrganization(info: Omit<MarkRequired<Models.AccountUpdate, "accountName">, "pinnedDatasets">): Promise<Org>;
    getOrganizations(): Promise<Org[]>;
}
