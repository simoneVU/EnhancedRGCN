"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const App_1 = __importDefault(require("../App"));
const chai = __importStar(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
chai.use(chai_as_promised_1.default);
const expect = chai.expect;
process.on("unhandledRejection", function (reason, p) {
    console.warn("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});
describe("App", function () {
    describe("Initialization", function () {
        it("Should throw error on URL that isnt an API", async function () {
            return expect(App_1.default.get({
                url: "https://google.com",
            }).getApiInfo()).to.eventually.rejectedWith("Failed to fetch API information of https://google.com. (Expected a JSON response, but got text/html");
        });
        it("Should throw error on domain that doesnt exist", async function () {
            return expect(App_1.default.get({
                url: "https://googlsdfsdfsdfe.com",
            }).getApiInfo()).to.eventually.rejectedWith("Failed to fetch API information of https://googlsdfsdfsdfe.com. (request to https://googlsdfsdfsdfe.com/info failed");
        });
        it("Should extract api location from token", async function () {
            const app = App_1.default.get(process.env.UNITTEST_TOKEN_ACCOUNT);
            expect(app["_config"].url).not.be.undefined;
        });
        it("Should throw on malformed jwt token", async function () {
            expect(() => App_1.default.get("InvalidToken")).to.throw("Invalid token");
        });
    });
    it("Should correctly compare versions", async function () {
        const app = App_1.default.get({ url: "https://api.triplydb.com" });
        expect(await app.isCompatible("1.1.1")).to.equal(true);
        expect(await app.isCompatible("1.1.1-9")).to.equal(true);
        expect(await app.isCompatible("9.9.9")).to.equal(false);
        expect(await app.isCompatible("9.9.9-9")).to.equal(false);
    });
});
//# sourceMappingURL=App-test.js.map