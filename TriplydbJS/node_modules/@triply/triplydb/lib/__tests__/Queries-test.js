"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const App_1 = __importDefault(require("../App"));
const fs = __importStar(require("fs-extra"));
const chai = __importStar(require("chai"));
const utils_1 = require("./utils");
const path_1 = __importDefault(require("path"));
const n3 = __importStar(require("n3"));
const expect = chai.expect;
process.on("unhandledRejection", function (reason, p) {
    console.warn("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});
const tmpDir = utils_1.buildPathToSrcPath(__dirname, "tmp");
const datasetsToClean = [];
let testDsIndex = 0;
const getNewTestDs = async (account, accessLevel) => {
    const ds = await account.addDataset({
        name: `${utils_1.CommonUnittestPrefix}-${testDsIndex++}`,
        accessLevel: accessLevel,
    });
    datasetsToClean.push(ds);
    return ds;
};
describe("Queries", function () {
    let app;
    let user;
    let testDs;
    before(async function () {
        this.timeout(10000);
        app = App_1.default.get({ token: process.env.UNITTEST_TOKEN_ACCOUNT });
        user = await app.getUser();
        await utils_1.resetUnittestAccount(user);
        testDs = await getNewTestDs(user, "private");
        await fs.mkdirp(tmpDir);
    });
    it("Should create, update, and delete query", async function () {
        const query = await user.addQuery({
            name: "test-query",
            accessLevel: "private",
            dataset: await testDs.getInfo().then((i) => i.id),
        });
        expect(await query.getInfo().then((q) => q.accessLevel)).to.equal("private");
        await query.update({ accessLevel: "internal" });
        expect(await query.getInfo().then((q) => q.accessLevel)).to.equal("internal");
        await query.delete();
    });
    describe("Query results", function () {
        const DATA_SIZE = 10100;
        let dataset;
        before(async function () {
            this.timeout(120000);
            dataset = await getNewTestDs(user, "private");
            const dataFile = path_1.default.resolve(tmpDir, "query-test-source.ttl");
            await fs.writeFile(dataFile, [...Array(DATA_SIZE).keys()].map((i) => `<s:s${i}> <p:p${i}> <o:o${i}>.`).join("\n"));
            await dataset.importFromFiles(dataFile);
            await dataset.addService("sparql", "sparql");
        });
        describe("Construct-queries", async function () {
            let constructQuery;
            before(async function () {
                const constructQueryName = `${utils_1.CommonUnittestPrefix}-construct`;
                await user
                    .getQuery(constructQueryName)
                    .then((q) => q.delete())
                    .catch((e) => {
                    if (e.status === 404)
                        return;
                    throw e;
                });
                constructQuery = await user.addQuery({
                    name: constructQueryName,
                    accessLevel: "private",
                    requestConfig: { payload: { query: "construct {?s?p?o} where {?s?p?o}" } },
                    renderConfig: { output: "?" },
                    variables: [{ name: "s", termType: "NamedNode" }],
                    dataset: await dataset.getInfo().then((d) => d.id),
                });
            });
            it("Should query a saved construct-query (quad iterator)", async function () {
                var e_1, _a;
                this.timeout(60000);
                const expectedStatements = await constructQuery.getInfo().then((info) => { var _a; return (_a = info.dataset) === null || _a === void 0 ? void 0 : _a.statements; });
                let count = 0;
                try {
                    for (var _b = __asyncValues(constructQuery.results().statements()), _c; _c = await _b.next(), !_c.done;) {
                        const _ = _c.value;
                        count++;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                expect(expectedStatements).to.equal(count);
                const asArrayCount = await constructQuery
                    .results()
                    .statements()
                    .toArray()
                    .then((a) => a.length);
                expect(count).to.equal(asArrayCount);
            });
            it("Should query a saved construct-query (to file)", async function () {
                this.timeout(30000);
                const targetFile = path_1.default.resolve(tmpDir, "query-test-results.ttl");
                await constructQuery.results().statements().toFile(targetFile);
                const fileContent = await fs.readFile(targetFile, "utf-8");
                const parser = new n3.Parser();
                const quads = parser.parse(fileContent);
                expect(quads.length).to.equal(await constructQuery.getInfo().then((info) => { var _a; return (_a = info.dataset) === null || _a === void 0 ? void 0 : _a.statements; }));
            });
            it("Should support query variables in construct-queries", async function () {
                expect((await constructQuery.results({ s: "s:s1" }).statements().toArray()).length).to.equal(1);
            });
            it("Should not support bindings", async function () {
                expect(() => constructQuery.results().bindings()).to.throw();
            });
        });
        describe("Select-queries", async function () {
            let selectQuery;
            before(async function () {
                const selectQueryName = `${utils_1.CommonUnittestPrefix}-construct`;
                await user
                    .getQuery(selectQueryName)
                    .then((q) => q.delete())
                    .catch((e) => {
                    if (e.status === 404)
                        return;
                    throw e;
                });
                selectQuery = await user.addQuery({
                    name: selectQueryName,
                    accessLevel: "private",
                    requestConfig: { payload: { query: "select ?s?p?o where {?s?p?o}" } },
                    renderConfig: { output: "?" },
                    variables: [{ name: "s", termType: "NamedNode" }],
                    dataset: await dataset.getInfo().then((d) => d.id),
                });
            });
            it("Should query a saved select-query (statements iterator)", async function () {
                var e_2, _a;
                this.timeout(60000);
                const expectedStatements = await selectQuery.getInfo().then((info) => { var _a; return (_a = info.dataset) === null || _a === void 0 ? void 0 : _a.statements; });
                let count = 0;
                try {
                    for (var _b = __asyncValues(selectQuery.results().bindings()), _c; _c = await _b.next(), !_c.done;) {
                        const _ = _c.value;
                        count++;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                expect(expectedStatements).to.equal(count);
                const asArrayCount = await selectQuery
                    .results()
                    .bindings()
                    .toArray()
                    .then((a) => a.length);
                expect(count).to.equal(asArrayCount);
            });
            it("Should support query variables in select-queries", async function () {
                const results = await selectQuery.results({ s: "s:s1" }).bindings().toArray();
                expect(results.length).to.equal(1);
                expect(results[0]["p"]).to.not.be.undefined;
            });
            it("Should not support statements", async function () {
                expect(() => selectQuery.results().statements()).to.throw();
            });
        });
    });
});
//# sourceMappingURL=Queries-test.js.map