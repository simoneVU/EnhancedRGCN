"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOtherUser = exports.staticOtherUser = exports.buildPathToSrcPath = exports.resetUnittestAccount = exports.CommonUnittestPrefix = void 0;
const path = __importStar(require("path"));
exports.CommonUnittestPrefix = process.env["UNITTEST_NAMESPACE"] + "-triplydb-js";
const Error_1 = require("../utils/Error");
function throwErrorWhenNameNotPrefixed(name) {
    if (!name.startsWith(exports.CommonUnittestPrefix)) {
        throw new Error(`Resetting unittest account, and found a resource called ${name}. ` +
            `Expected this to be prefixed with ${exports.CommonUnittestPrefix} to avoid ` +
            `throwing too many things away while testing...`);
    }
}
async function removeDatasetsOfAccount(account) {
    var e_1, _a;
    try {
        for (var _b = __asyncValues(account.getDatasets()), _c; _c = await _b.next(), !_c.done;) {
            const dataset = _c.value;
            if (!dataset)
                break;
            const info = await dataset.getInfo();
            throwErrorWhenNameNotPrefixed(info.name);
            await dataset.delete();
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
async function resetUnittestAccount(user) {
    await removeDatasetsOfAccount(user);
    const orgs = await user.getOrganizations();
    for (const org of orgs) {
        throwErrorWhenNameNotPrefixed(await org.getName());
        await org.delete();
    }
    await user.pinItems([]);
}
exports.resetUnittestAccount = resetUnittestAccount;
function buildPathToSrcPath(...pathInBuildDir) {
    const fullBuildPath = path.resolve(...pathInBuildDir);
    const relativeToCwd = path.relative(path.resolve("./"), fullBuildPath);
    const [, ...newRelative] = path.normalize(relativeToCwd).split("/");
    return path.resolve("src", ...newRelative);
}
exports.buildPathToSrcPath = buildPathToSrcPath;
exports.staticOtherUser = "triplydb-js-testuser";
async function getOtherUser(app) {
    try {
        return await app.getUser(exports.staticOtherUser);
    }
    catch (e) {
        if (e instanceof Error_1.TriplyDbJsError && e.statusCode === 404) {
            throw Error_1.getErr(`User ${exports.staticOtherUser} does not exist. Please create it manually via the console, and rerun the test`);
        }
        throw e;
    }
}
exports.getOtherUser = getOtherUser;
//# sourceMappingURL=utils.js.map