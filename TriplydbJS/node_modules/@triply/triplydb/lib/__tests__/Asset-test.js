"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const App_1 = __importDefault(require("../App"));
const chai = __importStar(require("chai"));
const utils_1 = require("./utils");
const fs = __importStar(require("fs-extra"));
const expect = chai.expect;
process.on("unhandledRejection", function (reason, p) {
    console.warn("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});
const datasetsToClean = [];
let testDsIndex = 0;
const getNewTestDs = async (account, accessLevel) => {
    const ds = await account.addDataset({
        name: `${utils_1.CommonUnittestPrefix}-${testDsIndex++}`,
        accessLevel: accessLevel,
    });
    datasetsToClean.push(ds);
    return ds;
};
const otherfile = `${__dirname}/Dataset-test.js`;
describe("Assets", function () {
    let app;
    let user;
    let testDs;
    before(async function () {
        this.timeout(10000);
        app = App_1.default.get({
            url: process.env.UNITTEST_API_URL,
            token: process.env.UNITTEST_TOKEN_ACCOUNT,
        });
        user = await app.getUser();
        await utils_1.resetUnittestAccount(user);
        testDs = await getNewTestDs(user, "private");
    });
    it("Adding an asset", async function () {
        var _a;
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        expect(newAsset.getInfo().fileSize).to.equal((await fs.stat(__filename)).size);
    });
    it("Adding an asset for which the name already exists", async function () {
        var _a, _b;
        await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        return expect(testDs.uploadAsset(otherfile, (_b = this.test) === null || _b === void 0 ? void 0 : _b.title)).eventually.rejectedWith(/but an asset with that name already exists/);
    });
    it("Removing an asset", async function () {
        var _a;
        const assetsBefore = await testDs.getAssets().toArray();
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        expect((await testDs.getAssets().toArray()).length).to.equal(assetsBefore.length + 1);
        await newAsset.delete();
        expect((await testDs.getAssets().toArray()).length).to.equal(assetsBefore.length);
    });
    it("Adding a version to an asset", async function () {
        var _a;
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        expect(newAsset.getInfo().versions.length).to.equal(1);
        await newAsset.addVersion(otherfile);
        expect(newAsset.getInfo().versions.length).to.equal(2);
    });
    it("Removing a version that doesnt exist", async function () {
        var _a;
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        await newAsset.addVersion(otherfile);
        await expect(newAsset.delete(10)).eventually.rejectedWith("This asset has no version 10");
    });
    it("Removing a version", async function () {
        var _a;
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        await newAsset.addVersion(otherfile);
        await newAsset.delete(0);
        expect(newAsset.getInfo().versions.length).to.equal(1);
    });
    it("Removing the last version", async function () {
        var _a;
        const newAsset = await testDs.uploadAsset(__filename, (_a = this.test) === null || _a === void 0 ? void 0 : _a.title);
        await newAsset.delete(0);
        expect(() => newAsset.getInfo()).to.throw("This asset does not exist");
    });
});
//# sourceMappingURL=Asset-test.js.map