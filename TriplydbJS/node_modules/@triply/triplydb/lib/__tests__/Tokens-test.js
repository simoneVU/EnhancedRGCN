"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const chai_as_promised_1 = __importDefault(require("chai-as-promised"));
chai_1.default.use(chai_as_promised_1.default);
const expect = chai_1.default.expect;
const App_1 = __importDefault(require("../App"));
const utils_1 = require("./utils");
const readToken = process.env.UNITTEST_TOKEN_READ;
const writeToken = process.env.UNITTEST_TOKEN_WRITE;
const accountToken = process.env.UNITTEST_TOKEN_ACCOUNT;
const url = process.env.UNITTEST_API_URL;
describe("Tokens", function () {
    let readAccount;
    let writeAccount;
    let accountAccount;
    let accountName;
    before(async function () {
        readAccount = await App_1.default.get({ url: url, token: readToken }).getUser();
        writeAccount = await App_1.default.get({ url: url, token: writeToken }).getUser();
        accountAccount = await App_1.default.get({ url: url, token: accountToken }).getUser();
        accountName = (await readAccount.getInfo()).accountName;
        await utils_1.resetUnittestAccount(accountAccount);
    });
    describe.skip("Rename account", function () {
        const renameFunction = (account, originalAccountname) => account.update({ accountName: "joe" }).then(() => account.update({ accountName: originalAccountname }));
        it("read-token", async function () {
            expect(async () => await renameFunction(readAccount, accountName)).to.throw;
        });
        it("write-token", async function () {
            expect(async () => await renameFunction(writeAccount, accountName)).to.throw;
        });
        it.skip("account-token", async function () {
            await renameFunction(accountAccount, accountName);
        });
    });
    describe("Create and delete dataset", function () {
        const createDeleteDsFunction = (account) => account
            .addDataset({ name: `${utils_1.CommonUnittestPrefix}-test-ds`, accessLevel: "private" })
            .then((ds) => ds.update({ name: "its-a-ds" }))
            .then((ds) => ds.delete());
        it("read-token", async function () {
            return expect(createDeleteDsFunction(readAccount)).to.eventually.rejectedWith(`Failed to add dataset ${utils_1.CommonUnittestPrefix}-test-ds to account ${accountName}. (401: Unauthorized.)`);
        });
        it("write-token", async function () {
            await createDeleteDsFunction(writeAccount);
        });
        it("account-token", async function () {
            await createDeleteDsFunction(accountAccount);
        });
    });
    it("Read own private dataset with read-only token", async function () {
        var e_1, _a;
        const newDs = await writeAccount.addDataset({ name: `${utils_1.CommonUnittestPrefix}-test-ds`, accessLevel: "private" });
        let datasets = [];
        try {
            for (var _b = __asyncValues(readAccount.getDatasets()), _c; _c = await _b.next(), !_c.done;) {
                let ds = _c.value;
                ds && datasets.push(ds);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) await _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        const newDsId = (await newDs.getInfo()).id;
        let found = false;
        for (const d of datasets) {
            if ((await d.getInfo()).id === newDsId) {
                found = true;
                break;
            }
        }
        await newDs.delete();
        if (!found) {
            throw new Error("new private ds not in list of datasets when using readToken");
        }
    });
});
//# sourceMappingURL=Tokens-test.js.map