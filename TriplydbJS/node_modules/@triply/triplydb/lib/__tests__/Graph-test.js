"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const App_1 = __importDefault(require("../App"));
const path_1 = __importDefault(require("path"));
const chai = __importStar(require("chai"));
const utils_1 = require("./utils");
const expect = chai.expect;
process.on("unhandledRejection", function (reason, p) {
    console.warn("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});
const datasetsToClean = [];
let testDsIndex = 0;
const getNewTestDs = async (account, accessLevel) => {
    const ds = await account.addDataset({
        name: `${utils_1.CommonUnittestPrefix}-${testDsIndex++}`,
        accessLevel: accessLevel,
    });
    datasetsToClean.push(ds);
    return ds;
};
const dataDir = utils_1.buildPathToSrcPath(__dirname, "__data__");
describe("Graphs", function () {
    let app;
    let user;
    let testDs;
    before(async function () {
        this.timeout(10000);
        app = App_1.default.get({ token: process.env.UNITTEST_TOKEN_ACCOUNT });
        user = await app.getUser();
        await utils_1.resetUnittestAccount(user);
        testDs = await getNewTestDs(user, "private");
        await testDs.importFromFiles({ defaultGraphName: "https://somegraph.com" }, path_1.default.resolve(dataDir, "test102.nt"));
    });
    it("Should be able to fetch graph metadata", async function () {
        const graphs = await testDs.getGraphs().toArray();
        expect(graphs).to.have.lengthOf(1);
        const graphInfo = await graphs[0].getInfo();
        expect(graphInfo.graphName).to.equal("https://somegraph.com");
    });
    it("Should be able to fetch graph store", async function () {
        const graph = await testDs.getGraph("https://somegraph.com");
        const store = await graph.toStore();
        expect(store.size).to.equal(102);
    });
});
//# sourceMappingURL=Graph-test.js.map