"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const App_1 = __importDefault(require("../App"));
const chai = __importStar(require("chai"));
const utils_1 = require("./utils");
const lodash_1 = require("lodash");
const expect = chai.expect;
process.on("unhandledRejection", function (reason, p) {
    console.warn("Possibly Unhandled Rejection at: Promise ", p, " reason: ", reason);
});
describe.skip("User", function () {
    let app;
    let user;
    before(async function () {
        app = App_1.default.get({
            url: process.env.UNITTEST_API_URL,
            token: process.env.UNITTEST_TOKEN_ACCOUNT,
        });
        user = await app.getUser();
        await user.getInfo();
    });
    it("rename account", async function () {
        const originalName = (await user.getInfo()).accountName;
        const newName = utils_1.CommonUnittestPrefix + lodash_1.times(20, () => lodash_1.random(35).toString(36)).join("");
        await user.update({ accountName: newName });
        expect((await user.getInfo()).accountName).to.equal(newName);
        await user.update({ accountName: originalName });
        expect((await user.getInfo()).accountName).to.equal(originalName);
    });
});
//# sourceMappingURL=User-test.js.map