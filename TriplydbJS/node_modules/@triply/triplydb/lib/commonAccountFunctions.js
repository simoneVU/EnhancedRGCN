"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureDs = exports.setAvatar = exports.update = exports.getDataset = exports.exists = exports.pinItems = exports.getPinnedItems = exports.addDataset = exports.getDatasets = exports.getStories = exports.getStory = exports.getQueries = exports.getQuery = exports.addQuery = exports.getName = void 0;
const Query_1 = __importDefault(require("./Query"));
const AsyncIteratorHelper_1 = __importDefault(require("./utils/AsyncIteratorHelper"));
const Story_1 = __importDefault(require("./Story"));
const RequestHandler_1 = require("./RequestHandler");
const Dataset_1 = __importDefault(require("./Dataset"));
const Error_1 = require("./utils/Error");
async function getName() {
    const name = this["_name"];
    if (name)
        return name;
    const info = await this.getInfo();
    if (!info.accountName)
        throw Error_1.getErr("This account has no name");
    return info.accountName;
}
exports.getName = getName;
async function addQuery(query) {
    const app = this["_app"];
    const accountName = await this.getName();
    return new Query_1.default(app, await RequestHandler_1._post({
        app: app,
        path: "/queries/" + accountName,
        data: query,
        errorWithCleanerStack: Error_1.getErr(`Failed to add a query to account ${accountName}.`),
    }), this);
}
exports.addQuery = addQuery;
async function getQuery(name) {
    const app = this["_app"];
    const accountName = await this.getName();
    const query = (await RequestHandler_1._get({
        app: app,
        path: "/queries/" + accountName + "/" + name,
        errorWithCleanerStack: Error_1.getErr(`Failed to get query ${name} of account ${accountName}`),
    }));
    return new Query_1.default(app, query, this);
}
exports.getQuery = getQuery;
function getQueries() {
    const app = this["_app"];
    return new AsyncIteratorHelper_1.default({
        error: Error_1.getErr(`Failed to get queries`),
        getErrorMessage: async () => `Failed to get queries of ${await this.getName()}`,
        app: app,
        getUrl: async () => app["_config"].url + `/queries/${await this.getName()}`,
        mapResult: async (queryInfo) => new Query_1.default(app, queryInfo, this),
    });
}
exports.getQueries = getQueries;
async function getStory(name) {
    const app = this["_app"];
    const accountName = await this.getName();
    const story = await RequestHandler_1._get({
        errorWithCleanerStack: Error_1.getErr(`Failed to get story ${name} of ${accountName}.`),
        app: app,
        path: "/stories/" + accountName + "/" + name,
    });
    return new Story_1.default(app, story, this);
}
exports.getStory = getStory;
function getStories() {
    const app = this["_app"];
    return new AsyncIteratorHelper_1.default({
        error: Error_1.getErr(`Failed to get stories`),
        getErrorMessage: async () => `Failed to get stories of ${await this.getName()}`,
        app: app,
        getUrl: async () => app["_config"].url + `/stories/${await this.getName()}`,
        mapResult: async (queryInfo) => new Story_1.default(app, queryInfo, this),
    });
}
exports.getStories = getStories;
function getDatasets() {
    const app = this["_app"];
    return new AsyncIteratorHelper_1.default({
        error: Error_1.getErr(`Failed to get datasets`),
        getErrorMessage: async () => `Failed to get datasets of ${await this.getName()}`,
        app: app,
        getUrl: async () => app["_config"].url + `/datasets/${await this.getName()}`,
        mapResult: async (dsInfo) => new Dataset_1.default(app, this, dsInfo.name, dsInfo),
    });
}
exports.getDatasets = getDatasets;
async function addDataset(ds) {
    const app = this["_app"];
    const accountName = await this.getName();
    const createdDs = await RequestHandler_1._post({
        errorWithCleanerStack: Error_1.getErr(`Failed to add dataset ${ds.name} to account ${accountName}.`),
        app: app,
        path: `/datasets/${accountName}`,
        data: ds,
    });
    return new Dataset_1.default(app, this, createdDs.name, createdDs);
}
exports.addDataset = addDataset;
async function getPinnedItems() {
    const app = this["_app"];
    const info = await this.getInfo();
    if (!info.pinnedItems)
        return [];
    return info.pinnedItems.map((pinnedItem) => {
        if (pinnedItem.type === "Dataset") {
            return new Dataset_1.default(app, this, pinnedItem.item.name, pinnedItem.item);
        }
        else if (pinnedItem.type === "Query") {
            return new Query_1.default(app, pinnedItem.item, this);
        }
        else if (pinnedItem.type === "Story") {
            return new Story_1.default(app, pinnedItem.item, this);
        }
        else {
            throw Error_1.getErr("Unexpected pinned item type: " + pinnedItem);
        }
    });
}
exports.getPinnedItems = getPinnedItems;
async function pinItems(items) {
    const app = this["_app"];
    const pinnedItems = await Promise.all(items.map(async (item) => {
        let pinnedItemUpdate;
        if (item instanceof Dataset_1.default) {
            const info = await item.getInfo();
            pinnedItemUpdate = { type: "Dataset", item: info.id };
        }
        else if (item instanceof Story_1.default) {
            const info = await item.getInfo();
            pinnedItemUpdate = { type: "Story", item: info.id };
        }
        else if (item instanceof Query_1.default) {
            const info = await item.getInfo();
            pinnedItemUpdate = { type: "Query", item: info.id };
        }
        else {
            throw Error_1.getErr("Unrecognized pinned item " + item);
        }
        return pinnedItemUpdate;
    }));
    const accountName = await this.getName();
    this["_setInfo"]((await RequestHandler_1._patch({
        errorWithCleanerStack: Error_1.getErr(`Failed to pin ${items.length} items in ${accountName}`),
        app: app,
        path: "/accounts/" + accountName,
        data: {
            pinnedItems: pinnedItems,
        },
        query: { verbose: "" },
    })));
    return this;
}
exports.pinItems = pinItems;
async function exists() {
    try {
        await this.getInfo();
        return true;
    }
    catch (e) {
        if (e.statusCode === 404)
            return false;
        throw e;
    }
}
exports.exists = exists;
function getDataset(ds) {
    const app = this["_app"];
    return new Dataset_1.default(app, this, ds);
}
exports.getDataset = getDataset;
async function update(updateObj) {
    const app = this["_app"];
    const accountName = await this.getName();
    this["_setInfo"](await RequestHandler_1._patch({
        errorWithCleanerStack: Error_1.getErr(`Failed to update account information of ${accountName}`),
        app: app,
        path: "/accounts/" + accountName,
        data: updateObj,
    }));
    return this;
}
exports.update = update;
async function setAvatar(pathBufferOrFile) {
    const app = this["_app"];
    const info = await this.getInfo();
    const accountName = await this.getName();
    await RequestHandler_1._post({
        errorWithCleanerStack: Error_1.getErr(`Failed to add avatar to account ${accountName}.`),
        app: app,
        path: "/imgs/avatars/a/" + info.uid,
        attach: { avatar: pathBufferOrFile },
    });
}
exports.setAvatar = setAvatar;
async function ensureDs(name, newDsInfo) {
    const ds = this.getDataset(name);
    if (await ds.exists())
        return ds;
    return this.addDataset(Object.assign(Object.assign({}, (newDsInfo || {})), { name: name }));
}
exports.ensureDs = ensureDs;
//# sourceMappingURL=commonAccountFunctions.js.map