"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RequestHandler_1 = require("./RequestHandler");
const commonAccountFunctions_1 = require("./commonAccountFunctions");
const Error_1 = require("./utils/Error");
class Org {
    constructor(app, accountName, info) {
        this.getDataset = commonAccountFunctions_1.getDataset;
        this.exists = commonAccountFunctions_1.exists;
        this.update = commonAccountFunctions_1.update;
        this.setAvatar = commonAccountFunctions_1.setAvatar;
        this.getQuery = commonAccountFunctions_1.getQuery;
        this.getQueries = commonAccountFunctions_1.getQueries;
        this.getStory = commonAccountFunctions_1.getStory;
        this.getStories = commonAccountFunctions_1.getStories;
        this.addQuery = commonAccountFunctions_1.addQuery;
        this.getDatasets = commonAccountFunctions_1.getDatasets;
        this.addDataset = commonAccountFunctions_1.addDataset;
        this.getPinnedItems = commonAccountFunctions_1.getPinnedItems;
        this.pinItems = commonAccountFunctions_1.pinItems;
        this.getName = commonAccountFunctions_1.getName;
        this.ensureDs = commonAccountFunctions_1.ensureDs;
        this._app = app;
        this._name = accountName;
        this._info = info;
    }
    asUser() {
        var _a;
        throw Error_1.getErr(`${((_a = this._info) === null || _a === void 0 ? void 0 : _a.accountName) || "This"} is an organization. Cannot fetch this as a user.`);
    }
    asOrg() {
        return this;
    }
    async getInfo(refresh = false) {
        if (!refresh && this._info)
            return this._info;
        if (!this._name)
            throw Error_1.getErr("Missing name for organization");
        this._setInfo((await RequestHandler_1._get({
            errorWithCleanerStack: Error_1.getErr(`Failed to get information of organization ${this._name}.`),
            app: this._app,
            path: "/accounts/" + this._name,
            query: { verbose: "" },
        })));
        return this._info;
    }
    _setInfo(info) {
        this._info = info;
        this._name = info.accountName;
    }
    async getMembers(refresh = false) {
        if (refresh || !this._members) {
            const name = await this.getName();
            this._members = await RequestHandler_1._get({
                errorWithCleanerStack: Error_1.getErr(`Failed to get members of organization ${name}.`),
                app: this._app,
                path: `/accounts/${name}/members`,
            });
        }
        return this._members;
    }
    async addMembers(...members) {
        const name = await this.getName();
        await Promise.all(members.map(async (m) => {
            const memberName = typeof m.user === "string" ? m.user : await m.user.getName();
            return RequestHandler_1._post({
                errorWithCleanerStack: Error_1.getErr(`Failed to add ${m.user} as member to organization ${this._name}.`).addContext(m),
                app: this._app,
                data: { accountName: memberName, role: m.role },
                path: `/accounts/${name}/members`,
            });
        }));
        return this.getMembers(true);
    }
    async removeMembers(...members) {
        const name = await this.getName();
        await Promise.all(members.map(async (m) => {
            const memberName = typeof m === "string" ? m : await m.getName();
            return RequestHandler_1._delete({
                errorWithCleanerStack: Error_1.getErr(`Failed to remove ${memberName} as member of organization ${this._name}.`),
                app: this._app,
                path: `/accounts/${name}/members/${memberName}`,
                expectedResponseBody: "empty",
            });
        }));
        return this.getMembers(true);
    }
    async changeRole(member, role) {
        const orgName = await this.getName();
        const memberName = await member.getName();
        await RequestHandler_1._patch({
            errorWithCleanerStack: Error_1.getErr(`Failed to change role of ${memberName} to ${role} in organization ${orgName}`),
            app: this._app,
            path: `/accounts/${orgName}/members/${memberName}`,
            data: {
                role: role,
            },
        });
        return this.getMembers(true);
    }
    async delete() {
        const name = await this.getName();
        await RequestHandler_1._delete({
            errorWithCleanerStack: Error_1.getErr(`Failed to delete organization ${name}.`),
            app: this._app,
            path: `/accounts/${name}`,
            expectedResponseBody: "empty",
        });
        delete this._info;
        delete this._members;
    }
}
exports.default = Org;
//# sourceMappingURL=Org.js.map