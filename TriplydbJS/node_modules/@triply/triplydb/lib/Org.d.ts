import { Models } from "@triply/utils";
import App from "./App";
import { AccountBase } from "./Account";
import User from "./User";
import { addQuery, getStories, getStory, getQueries, getQuery, getDatasets, addDataset, pinItems, getPinnedItems, setAvatar, getDataset, exists, update, getName, ensureDs } from "./commonAccountFunctions";
export default class Org implements AccountBase {
    private _app;
    private _info?;
    private _members?;
    private _name?;
    constructor(app: App, accountName: string, info: Models.Org);
    getDataset: typeof getDataset;
    exists: typeof exists;
    update: typeof update;
    setAvatar: typeof setAvatar;
    getQuery: typeof getQuery;
    getQueries: typeof getQueries;
    getStory: typeof getStory;
    getStories: typeof getStories;
    addQuery: typeof addQuery;
    getDatasets: typeof getDatasets;
    addDataset: typeof addDataset;
    getPinnedItems: typeof getPinnedItems;
    pinItems: typeof pinItems;
    getName: typeof getName;
    ensureDs: typeof ensureDs;
    asUser(): User;
    asOrg(): this;
    getInfo(refresh?: boolean): Promise<Models.Org>;
    private _setInfo;
    getMembers(refresh?: boolean): Promise<Models.OrgMember[]>;
    addMembers(...members: Array<{
        user: User | string;
        role: Models.OrgRole;
    }>): Promise<Models.OrgMember[]>;
    removeMembers(...members: Array<User | string>): Promise<Models.OrgMember[]>;
    changeRole(member: User, role: Models.OrgRole): Promise<Models.OrgMember[]>;
    delete(): Promise<void>;
}
