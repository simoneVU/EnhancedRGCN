"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Dataset_1 = __importDefault(require("./Dataset"));
const User_1 = __importDefault(require("./User"));
const Account_1 = require("./Account");
const jwt_decode_1 = __importDefault(require("jwt-decode"));
const RequestHandler_1 = require("./RequestHandler");
const Error_1 = require("./utils/Error");
const calver = __importStar(require("@triply/utils/lib/calver"));
const semver_1 = __importDefault(require("semver"));
const APP_CONFIG_DEFAULTS = {
    url: "https://api.triplydb.com",
};
class App {
    constructor(conf = {}) {
        this._config = Object.assign({}, conf);
        if (!this._config.url && this._config.token) {
            try {
                const decodedToken = jwt_decode_1.default(this._config.token);
                if (decodedToken && decodedToken.iss !== "triply.cc")
                    this._config.url = decodedToken.iss;
            }
            catch (_a) {
                throw Error_1.getErr("Invalid token").addContext({ token: this._config.token });
            }
        }
        this._config = Object.assign(Object.assign({}, APP_CONFIG_DEFAULTS), this._config);
        this.validateConf();
    }
    validateConf() {
        if (!this._config)
            throw Error_1.getErr("No TriplyDB-JS configuration object set");
        if (!this._config.url)
            throw Error_1.getErr("No domain specified in TriplyDB-JS configuration");
    }
    async getApiInfo() {
        if (this._info)
            return this._info;
        this._info = await RequestHandler_1._get({
            app: this,
            path: "/info",
            errorWithCleanerStack: Error_1.getErr(`Failed to fetch API information of ${this._config.url}.`),
        });
        return this._info;
    }
    async getAccount(accountName) {
        if (!accountName) {
            return new User_1.default(this);
        }
        return Account_1.getUserOrOrg(accountName, this);
    }
    async getUser(accountName) {
        if (!accountName) {
            return new User_1.default(this);
        }
        return (await Account_1.getUserOrOrg(accountName, this)).asUser();
    }
    async getOrganization(accountName) {
        return (await Account_1.getUserOrOrg(accountName, this)).asOrg();
    }
    async getDataset(accountName, dsName) {
        const account = await this.getAccount(accountName);
        return new Dataset_1.default(this, account, dsName);
    }
    async isCompatible(minimumVersion) {
        const apiInfo = await this.getApiInfo();
        if (!apiInfo.version)
            throw Error_1.getErr(`The TriplyDB API ${apiInfo.apiUrl} does not report its version.`);
        if (apiInfo.version === "unset")
            return true;
        if (calver.isSemver(apiInfo.version) && calver.isSemver(minimumVersion)) {
            return semver_1.default.gte(apiInfo.version, minimumVersion);
        }
        else {
            return calver.gte(apiInfo.version, minimumVersion);
        }
    }
    static get(conf) {
        let app;
        if (typeof conf === "string") {
            app = new App({ token: conf });
        }
        else {
            app = new App(conf);
        }
        return app;
    }
}
exports.default = App;
//# sourceMappingURL=App.js.map