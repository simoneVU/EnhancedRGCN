"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const N3 = __importStar(require("n3"));
const nTriply = __importStar(require("../nTriply"));
const ntriples = '<a> <b> _:0 . _:0 <c> "blaa\\"t"@en .  _:0 <d> "blaat" .';
describe.skip("NTriply format", function () {
    it("From nt to n3 to nTriply to nt", async function () {
        const parser = new N3.Parser();
        const n3Statements = parser.parse(ntriples);
        const nTriplyStatements = n3Statements.map((n3) => nTriply.rdfjsToNtriply(n3));
        await nTriply.ntriplyToNquads(nTriplyStatements);
    });
});
//# sourceMappingURL=nTriply-test.js.map