"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const calver_1 = require("../calver");
const chai_1 = require("chai");
describe("Calver", () => {
    describe("Incrementing", function () {
        it("From/to regular calver where we increment the month", function () {
            const newVersion = calver_1.increment("21.02.1", { currentDate: new Date("2021-03-01") });
            chai_1.expect(newVersion).to.equal("21.03.0");
        });
        it("From/to regular calver where we increment the year", function () {
            const newVersion = calver_1.increment("21.02.1", { currentDate: new Date("2022-01-01") });
            chai_1.expect(newVersion).to.equal("22.01.0");
        });
        it("From/to regular calver where we increment the month version", function () {
            const newVersion = calver_1.increment("21.02.1", { currentDate: new Date("2021-02-01") });
            chai_1.expect(newVersion).to.equal("21.02.2");
        });
        it("From regular calver to patched calver", function () {
            const newVersion = calver_1.increment("21.02.1", { patch: true, currentDate: new Date("2021-03-01") });
            chai_1.expect(newVersion).to.equal("21.02.1-1");
        });
        it("From patched calver to other patched calver", function () {
            const patch1 = calver_1.increment("21.02.1-1", { patch: true, currentDate: new Date("2021-03-01") });
            chai_1.expect(patch1).to.equal("21.02.1-2");
            const patch2 = calver_1.increment("21.02.1-2", { patch: true, currentDate: new Date("2021-03-01") });
            chai_1.expect(patch2).to.equal("21.02.1-3");
        });
        it("From patched calver to regular calver", function () {
            const newVersion = calver_1.increment("21.02.1-1", { currentDate: new Date("2021-02-01") });
            chai_1.expect(newVersion).to.equal("21.02.2");
        });
        it("From syntactically invalid calver", function () {
            chai_1.expect(() => calver_1.increment("21-02-1")).to.throw("Failed to parse");
            chai_1.expect(() => calver_1.increment("21.13.1")).to.throw("Invalid month number 13");
            chai_1.expect(() => calver_1.increment("21..1")).to.throw("Failed to parse");
        });
        describe("Incrementing semver to calver", function () {
            it("From regular semver", function () {
                const currentDate = new Date("2021-03-01");
                chai_1.expect(calver_1.increment("1.2.3", { currentDate })).to.equal("21.03.0");
                chai_1.expect(calver_1.increment("0.1.2", { currentDate })).to.equal("21.03.0");
            });
            it("From patched semver", function () {
                const currentDate = new Date("2021-03-01");
                chai_1.expect(calver_1.increment("1.2.3-1", { currentDate })).to.equal("21.03.0");
                chai_1.expect(calver_1.increment("0.1.2-1", { currentDate })).to.equal("21.03.0");
            });
        });
    });
    describe("Comparisons", function () {
        it("With year difference", function () {
            chai_1.expect(calver_1.lt("20.03.1", "21.03.1")).to.be.true;
        });
        it("With month difference", function () {
            chai_1.expect(calver_1.lt("21.02.1", "21.03.0")).to.be.true;
            chai_1.expect(calver_1.lt("21.03.0", "21.02.1")).to.be.false;
        });
        it("With versionInMonth difference", function () {
            chai_1.expect(calver_1.lt("21.03.0", "21.03.1")).to.be.true;
            chai_1.expect(calver_1.lt("21.03.2", "21.03.1")).to.be.false;
        });
        it("With patch-version difference", function () {
            chai_1.expect(calver_1.lt("21.03.0", "21.03.0-1")).to.be.true;
            chai_1.expect(calver_1.lt("21.03.0-1", "21.03.0")).to.be.false;
            chai_1.expect(calver_1.gt("21.03.0-2", "21.03.0-1")).to.be.true;
        });
        it("Equality checks should work", function () {
            chai_1.expect(calver_1.lte("21.03.0", "21.03.0")).to.be.true;
            chai_1.expect(calver_1.gte("21.03.0-1", "21.03.0-1")).to.be.true;
        });
        it("Should fail on syntactically invalid versions", function () {
            chai_1.expect(() => calver_1.lt("21-02-1", "0.0.1")).to.throw("Failed to parse");
            chai_1.expect(() => calver_1.gt("21.02.1", "")).to.throw("Failed to parse");
        });
        it("Semver should always be older", function () {
            chai_1.expect(calver_1.lt("0.0.1", "21.03.0-1")).to.be.true;
            chai_1.expect(calver_1.lt("9.12.3-1", "21.03.0")).to.be.true;
            chai_1.expect(calver_1.lt("21.03.0-1", "0.0.1")).to.be.false;
            chai_1.expect(calver_1.lt("21.03.0", "9.12.3-1")).to.be.false;
            chai_1.expect(calver_1.gt("0.0.1", "21.03.0-1")).to.be.false;
            chai_1.expect(calver_1.gt("9.12.3-1", "21.03.0")).to.be.false;
        });
        it("Should not support comparing two semvers", function () {
            chai_1.expect(() => calver_1.lte("0.0.1", "0.0.1")).to.throw("We do not support comparing semver alone");
            chai_1.expect(() => calver_1.gte("0.0.1", "9.12.3-1")).to.throw("We do not support comparing semver alone");
        });
    });
});
//# sourceMappingURL=calver-test.js.map