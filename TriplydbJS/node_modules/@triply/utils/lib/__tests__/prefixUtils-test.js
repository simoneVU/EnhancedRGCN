"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai = __importStar(require("chai"));
var expect = chai.expect;
const Immutable = __importStar(require("immutable"));
const prefixUtils = __importStar(require("../prefixUtils"));
describe("PrefixUtils", function () {
    describe("getLocalName", function () {
        describe("When localname should be empty", function () {
            it("domain name only", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa")).to.deep.equal({
                    iri: "http://blaa",
                });
            });
            it("domain name with trailing slash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com:100/")).to.deep.equal({
                    iri: "http://blaa.com:100/",
                });
            });
            it("domain name with query args", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa?bla")).to.deep.equal({
                    iri: "http://blaa?bla",
                });
            });
            it("with invalid iri", function () {
                expect(prefixUtils.getLocalNameInfo("notanirisdb@!@b")).to.deep.equal({
                    iri: "notanirisdb@!@b",
                });
            });
        });
        describe("When localname should be set", function () {
            it("IRI with query args and trailing slash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa/bla?i=1")).to.deep.equal({
                    iri: "http://blaa/",
                    localName: "bla?i=1",
                });
            });
            it("IRI with query args and double trailing slash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa//bla?i=1")).to.deep.equal({
                    iri: "http://blaa//",
                    localName: "bla?i=1",
                });
            });
            it("pathname only", function () {
                expect(prefixUtils.getLocalNameInfo("/bla/blo")).to.deep.equal({
                    iri: "/bla/",
                    localName: "blo",
                });
            });
            it("With path (1level)", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local")).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "local",
                });
            });
            it("With path (2level)", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/local2")).to.deep.equal({
                    iri: "http://blaa.com/local/",
                    localName: "local2",
                });
            });
            it("With path (3level) and different separator", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/bla#")).to.deep.equal({
                    iri: "http://blaa.com/local/",
                    localName: "bla#",
                });
            });
            it("With path (3level) and different separator", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/bla#123")).to.deep.equal({
                    iri: "http://blaa.com/local/bla#",
                    localName: "123",
                });
            });
            it("With path and query and hash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/bla?q=1#123")).to.deep.equal({
                    iri: "http://blaa.com/local/bla?q=1#",
                    localName: "123",
                });
            });
            it("With path and query and empty hash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/bla?q=1#")).to.deep.equal({
                    iri: "http://blaa.com/local/",
                    localName: "bla?q=1#",
                });
            });
            it("With path and hash including query", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/bla#123?q=1")).to.deep.equal({
                    iri: "http://blaa.com/local/bla#",
                    localName: "123?q=1",
                });
            });
            it("With path and trailing slash", function () {
                expect(prefixUtils.getLocalNameInfo("http://blaa.com/local/")).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "local/",
                });
            });
        });
    });
    describe("getPrefixInfo", function () {
        describe("from prefix to iri", function () {
            it("finds the iri", function () {
                expect(prefixUtils.getPrefixInfoFromPrefixedValue("abc:bla", [{ prefixLabel: "abc", iri: "http://blaa.com/" }])).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "bla",
                    prefixLabel: "abc",
                });
            });
            it("does not give prefixLabel if prefix not found", function () {
                expect(prefixUtils.getPrefixInfoFromPrefixedValue("abcd:bla", [{ prefixLabel: "abc", iri: "http://bla.com/" }])).to.deep.equal({
                    iri: "abcd:bla",
                });
            });
            it("should work with immutable ordered map", function () {
                const prefixMap = Immutable.OrderedMap([{ prefixLabel: "abc", iri: "http://blaa.com/" }].map((p) => [p.prefixLabel, p]));
                expect(prefixUtils.getPrefixInfoFromPrefixedValue("abc:bla", prefixMap)).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "bla",
                    prefixLabel: "abc",
                });
            });
        });
        describe("from iri to prefix", function () {
            it("finds the prefix", function () {
                expect(prefixUtils.getPrefixInfoFromIri("http://blaa.com/bla", [{ prefixLabel: "abc", iri: "http://blaa.com/" }])).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "bla",
                    prefixLabel: "abc",
                });
            });
            it("should work with immutable ordered map", function () {
                const prefixMap = Immutable.OrderedMap([{ prefixLabel: "abc", iri: "http://blaa.com/" }].map((p) => [p.prefixLabel, p]));
                expect(prefixUtils.getPrefixInfoFromIri("http://blaa.com/bla", prefixMap)).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "bla",
                    prefixLabel: "abc",
                });
            });
            it("does not give prefixLabel if iri not found", function () {
                expect(prefixUtils.getPrefixInfoFromIri("http://blaa.com/bla", [{ prefixLabel: "abc", iri: "http://bla.com/" }])).to.deep.equal({
                    iri: "http://blaa.com/",
                    localName: "bla",
                });
            });
            it("does not match complete iri", function () {
                expect(prefixUtils.getPrefixInfoFromIri("https://iisg.triply.cc/iisg/cshapes/", [
                    { prefixLabel: "cshapes", iri: "https://iisg.triply.cc/iisg/cshapes/" },
                ])).to.deep.equal({
                    iri: "https://iisg.triply.cc/iisg/",
                    localName: "cshapes/",
                });
            });
            it("finds prefix with longest iri", function () {
                expect(prefixUtils.getPrefixInfoFromIri("https://iisg.triply.cc/iisg/cshapes/", [
                    { prefixLabel: "cshapes", iri: "https://iisg.triply.cc/iisg/cshapes/" },
                    { prefixLabel: "triply", iri: "https://iisg.triply.cc/" },
                    { prefixLabel: "iisg", iri: "https://iisg.triply.cc/iisg/" },
                ])).to.deep.equal({
                    iri: "https://iisg.triply.cc/iisg/",
                    localName: "cshapes/",
                    prefixLabel: "iisg",
                });
            });
            it("finds prefix with longest iri (different order)", function () {
                expect(prefixUtils.getPrefixInfoFromIri("https://iisg.triply.cc/iisg/cshapes/", [
                    { prefixLabel: "cshapes", iri: "https://iisg.triply.cc/iisg/cshapes/" },
                    { prefixLabel: "iisg", iri: "https://iisg.triply.cc/iisg/" },
                    { prefixLabel: "triply", iri: "https://iisg.triply.cc/" },
                ])).to.deep.equal({
                    iri: "https://iisg.triply.cc/iisg/",
                    localName: "cshapes/",
                    prefixLabel: "iisg",
                });
            });
        });
    });
});
//# sourceMappingURL=prefixUtils-test.js.map