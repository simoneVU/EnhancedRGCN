"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai = __importStar(require("chai"));
const path_1 = __importDefault(require("path"));
var expect = chai.expect;
const fs_extra_1 = __importDefault(require("fs-extra"));
const sparqlVarUtils_1 = require("../sparqlVarUtils");
const parser = sparqlVarUtils_1.getParser();
const TEST_DIR = "./src/__tests__/queries";
describe("Testing sparqlJs queries", () => {
    it("looping through static files", async () => {
        const testFiles = await fs_extra_1.default.readdir(TEST_DIR);
        for (const file of testFiles) {
            if (file.endsWith(".skip"))
                continue;
            const query = (await fs_extra_1.default.readFile(path_1.default.resolve(TEST_DIR, file))).toString();
            try {
                expect(() => parser.parse(query)).not.to.throw;
            }
            catch (e) {
                e.message = `Test of ${file} failed:\n${e.message}`;
                throw e;
            }
        }
    });
});
//# sourceMappingURL=sparqljs-test.js.map