#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const calver_1 = require("../calver");
const binUtils_1 = require("./binUtils");
function help() {
    console.info("calver-increment [options]");
    console.info();
    console.info("Make a new calver version and update the package.json file");
    console.info();
    console.info("Options:");
    console.info("  --patch      Make a patch release. This keeps the current calver version intact and only modifies the patch number");
}
function printError(errMsg) {
    console.error(errMsg);
    console.error();
    help();
    process.exit(1);
}
binUtils_1.isCleanBranchOrExit();
try {
    const customArgs = process.argv.slice(2);
    if (customArgs.length > 1) {
        printError("Unexpected arguments");
    }
    let patch = false;
    if (customArgs.length === 1) {
        if (customArgs[0] === "--patch") {
            patch = true;
        }
        else {
            printError("Unexpected argument " + customArgs[0]);
        }
    }
    const currentVersion = process.env["npm_package_version"];
    if (!currentVersion) {
        printError("Only run this script via `yarn run` or `yarn exec`. Otherwise, we do not have access to the npm_package_version env variable");
        process.exit(1);
    }
    const newVersion = calver_1.increment(currentVersion, { patch: patch });
    console.info(`> Publishing new version ${newVersion}`);
    child_process_1.execSync(`yarn version --no-git-tag-version --new-version ${newVersion}`, {
        stdio: ["ignore", process.stdout, "pipe"],
    });
}
catch (e) {
    binUtils_1.printExecSyncError(e);
    process.exit(1);
}
//# sourceMappingURL=calverIncrement.js.map