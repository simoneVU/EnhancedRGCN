/// <reference types="node" />
import * as Models from "./Models";
export interface RequestTemplate {
    Query: {};
    Params: {};
    Body: any;
}
export interface ResponseTemplate {
    Body: any;
}
export interface HttpMethodTemplate {
    Req: RequestTemplate;
    Res: ResponseTemplate;
}
export declare type AllParams = info.Params & imgs.Params & imgs.avatars.a._accountId.Params & imgs.avatars.d._datasetId.Params & imgs.logos.Params & admin.Params & admin.services._serviceId.Params & ___prefixes.Params & ___prefixes._prefix.Params & datasets._account.Params & datasets._account._dataset.Params & datasets._account._dataset.services._serviceName.Params & datasets._account._dataset.graphs._graphId.Params & datasets._account._dataset.hooks._hookId.Params & datasets._account._dataset.assets._assetId.Params & datasets._account._dataset.assets._assetId._versionId.Params & datasets._account._dataset.download.Params & datasets._account._dataset.jobs._jobId.Params & datasets._account._dataset.jobs._jobId._sourceFileId.Params & queries._account.Params & queries._account._query.Params & stories._account.Params & stories._account._story.Params & topics._topicId.Params & account.members._member.Params & account.tokens._tokenId.Params & s._short.Params;
export interface GenericQuery {
    fields?: string;
}
export declare namespace info {
    interface Params {
    }
    interface Get {
        Req: {
            Query: GenericQuery & {};
            Params: Params;
            Body: {};
        };
        Res: {
            Body: Models.ClientConfig;
        };
    }
    interface Patch {
        Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.ClientConfigUpdate;
        };
        Res: {
            Body: Models.ClientConfig;
        };
    }
}
export declare namespace imgs {
    interface Params {
    }
    interface Get {
        Req: {
            Query: GenericQuery & {
                v?: number;
                w?: number;
                h?: number;
            };
            Params: Params;
            Body: {};
        };
        Res: {
            Body: Buffer;
        };
    }
    namespace avatars {
        namespace a {
            namespace _accountId {
                interface Params {
                    accountId: string;
                }
                interface Get {
                    Req: {
                        Query: GenericQuery & {
                            v?: number;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: {};
                    };
                }
                interface Post {
                    Req: {
                        Query: GenericQuery & {
                            verbose?: string;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Account;
                    };
                }
            }
        }
        namespace d {
            namespace _datasetId {
                interface Params {
                    datasetId: string;
                }
                interface Get {
                    Req: {
                        Query: GenericQuery & {
                            v?: number;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: {};
                    };
                }
                interface Post {
                    Req: {
                        Query: GenericQuery & {};
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Dataset;
                    };
                }
            }
        }
    }
    namespace logos {
        interface Params {
        }
        interface Get {
            Req: {
                Query: {
                    v?: number;
                    w?: number;
                    h?: number;
                };
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Buffer;
            };
        }
        interface Post {
            Req: {
                Query: {};
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.ClientConfig;
            };
        }
        interface Delete {
            Req: {
                Query: {};
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.ClientConfig;
            };
        }
    }
}
export declare namespace admin {
    interface Params {
    }
    namespace cache {
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.AdminCacheUpdate;
            };
            Res: {
                Body: {};
            };
        }
    }
    namespace debug {
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.AdminDebugUpdate;
            };
            Res: {
                Body: {};
            };
        }
    }
    namespace jobs {
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.Dataset[];
            };
        }
    }
    namespace limits {
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.InstanceLimitsJson;
            };
        }
    }
    namespace redirects {
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.RedirectRule[];
            };
        }
        interface Put {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.RedirectRule[];
            };
            Res: {
                Body: Models.RedirectRule[];
            };
        }
    }
    namespace services {
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.ServiceList;
            };
        }
        namespace _serviceId {
            interface Params {
                serviceId: string;
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
        }
    }
}
export declare namespace ___prefixes {
    interface Params {
    }
    interface Get {
        Req: {
            Query: GenericQuery & {
                scope?: "local" | "global";
            };
            Params: Params;
            Body: {};
        };
        Res: {
            Body: Models.Prefixes;
        };
    }
    interface Patch {
        Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.PrefixUpdate[];
        };
        Res: {
            Body: Models.Prefixes;
        };
    }
    interface Put {
        Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.PrefixUpdate[];
        };
        Res: {
            Body: Models.Prefixes;
        };
    }
    namespace _prefix {
        interface Params {
            prefix: string;
        }
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.Prefix;
            };
        }
        interface Put {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: string;
            };
            Res: {
                Body: Models.Prefix;
            };
        }
        interface Delete {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: string;
            };
        }
    }
}
export import prefixes = ___prefixes;
export declare namespace datasets {
    interface PaginatedDatasetQuery {
        since?: string;
        limit?: number;
        sortDirection?: "asc" | "desc";
        sparql?: string;
        q?: string;
    }
    export interface Get<Verbose = false> {
        Req: {
            Query: Verbose extends true ? GenericQuery & PaginatedDatasetQuery & {
                verbose: "";
            } : GenericQuery & PaginatedDatasetQuery;
            Params: {};
            Body: {};
        };
        Res: {
            Body: Verbose extends true ? Models.DatasetVerbose[] : Models.Dataset[];
        };
    }
    export namespace _account {
        interface Params {
            account: string;
        }
        interface Get {
            Req: {
                Query: GenericQuery & {
                    since?: string;
                    accessLevel?: "public" | "internal" | "private";
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                };
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.Dataset[];
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.NewDataset;
            };
            Res: {
                Body: Models.Dataset;
            };
        }
        namespace _dataset {
            export import prefixes = ___prefixes;
            interface Params extends datasets._account.Params {
                dataset: string;
            }
            interface Get<Verbose = false> {
                Req: {
                    Query: Verbose extends true ? GenericQuery & {
                        verbose: null;
                    } : GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: Verbose extends true ? Models.DatasetVerbose : Models.Dataset;
                };
            }
            interface Post {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Models.NewDataset;
                };
                Res: {
                    Body: Models.Dataset;
                };
            }
            interface Patch {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Models.UpdateDataset;
                };
                Res: {
                    Body: Models.Dataset;
                };
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
            namespace copy {
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: Models.NewDataset;
                    };
                    Res: {
                        Body: Models.Dataset;
                    };
                }
            }
            namespace chown {
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: Models.NewDataset;
                    };
                    Res: {
                        Body: Models.Dataset;
                    };
                }
            }
            namespace services {
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: Models.UpdateService;
                    };
                    Res: {
                        Body: Models.Service;
                    };
                }
                interface Get {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.ServiceList;
                    };
                }
                namespace _serviceName {
                    interface Params extends datasets._account._dataset.Params {
                        serviceName: string;
                    }
                    namespace sparql {
                        interface Get {
                            Req: {
                                Query: Models.SparqlQuery;
                                Params: Params;
                                Body: Models.SparqlQuery;
                            };
                            Res: {
                                Body: any;
                            };
                        }
                        interface Post {
                            Req: {
                                Query: Models.SparqlQuery;
                                Params: Params;
                                Body: Models.SparqlQuery;
                            };
                            Res: {
                                Body: any;
                            };
                        }
                    }
                    namespace search {
                        interface Get {
                            Req: {
                                Query: Models.SimpleSearchQuery;
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: any;
                            };
                        }
                        interface Post {
                            Req: {
                                Query: {} & GenericQuery;
                                Params: Params;
                                Body: Models.AdvancedSearchQuery;
                            };
                            Res: {
                                Body: any;
                            };
                        }
                    }
                    interface Get {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.Service;
                        };
                    }
                    interface Delete {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: undefined;
                        };
                    }
                    interface Post {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: Models.ServiceActions;
                        };
                        Res: {
                            Body: Models.Service;
                        };
                    }
                }
            }
            namespace graphs {
                interface Get {
                    Req: {
                        Query: GenericQuery & {
                            since?: string;
                            sortBy?: "graphName";
                            sortDirection?: "asc" | "desc";
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Graphs;
                    };
                }
                interface Delete {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Graphs;
                    };
                }
                namespace _graphId {
                    interface Params extends datasets._account._dataset.Params {
                        graphId: string;
                    }
                    interface Get {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.Graph;
                        };
                    }
                    interface Patch {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: Partial<Models.Graph>;
                        };
                        Res: {
                            Body: Models.Graph;
                        };
                    }
                    interface Delete {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: {};
                        };
                    }
                }
            }
            namespace insights {
                namespace classFrequency {
                    interface Get {
                        Req: {
                            Query: {
                                graphName: string;
                                offset?: number;
                            } & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.ClassFrequency;
                        };
                    }
                }
                namespace classHierarchy {
                    interface Get {
                        Req: {
                            Query: GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.ClassHierarchy;
                        };
                    }
                }
            }
            namespace hooks {
                interface Get {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Hooks;
                    };
                }
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: Models.HookCreate;
                    };
                    Res: {
                        Body: Models.Hook;
                    };
                }
                namespace _hookId {
                    interface Params extends datasets._account._dataset.Params {
                        hookId: string;
                    }
                    interface Get {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.Hook;
                        };
                    }
                    interface Patch {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: Models.Hook;
                        };
                        Res: {
                            Body: Models.Hook;
                        };
                    }
                    interface Delete {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: {};
                        };
                    }
                }
            }
            namespace hookRecords {
                namespace _hookId {
                    interface Params extends datasets._account._dataset.Params {
                        hookId: string;
                    }
                    interface Get {
                        Req: {
                            Query: GenericQuery & {
                                offset: number;
                                limit: number;
                            };
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: {
                                records: Models.WebHookTriggerRecords;
                                canLoadMore: boolean;
                            };
                        };
                    }
                }
            }
            namespace assets {
                interface Get {
                    Req: {
                        Query: GenericQuery & {
                            since?: string;
                            sortBy?: "assetName";
                            sortDirection?: "asc" | "desc";
                            fileName?: string;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Assets | Models.Asset;
                    };
                }
                interface Post {
                    Req: {
                        Query: {};
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Assets;
                    };
                }
                namespace download {
                    interface Get {
                        Req: {
                            Query: {
                                fileName: string;
                            };
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: any;
                        };
                    }
                }
                namespace _assetId {
                    interface Params extends datasets._account._dataset.Params {
                        assetId: string;
                    }
                    interface Get {
                        Req: {
                            Query: {} & GenericQuery;
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: any;
                        };
                    }
                    interface Put {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.Assets;
                        };
                    }
                    interface Delete {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: {};
                        };
                    }
                    namespace _versionId {
                        interface Params extends datasets._account._dataset.assets._assetId.Params {
                            versionId: string;
                        }
                        interface Get {
                            Req: {
                                Query: {} & GenericQuery;
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: any;
                            };
                        }
                        interface Delete {
                            Req: {
                                Query: {};
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: Models.Asset;
                            };
                        }
                    }
                }
            }
            namespace imports {
                interface Get {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Imports;
                    };
                }
                interface Patch {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: Models.UpdateImports;
                    };
                    Res: {
                        Body: Models.Imports;
                    };
                }
            }
            namespace statements {
                interface Get {
                    Req: {
                        Query: Models.HdtQuery & Models.HdtQueryShort;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.QueryResults;
                    };
                }
            }
            namespace fragments {
                interface Get {
                    Req: {
                        Query: Models.HdtQuery & {
                            resultsSoFar?: number;
                            limit?: number;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.QueryResults;
                    };
                }
            }
            namespace describe {
                interface Get {
                    Req: {
                        Query: Models.DescribeArguments;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.QueryResults;
                    };
                }
            }
            namespace terms {
                interface Get {
                    Req: {
                        Query: Models.FindTermsQuery;
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.FindTermsResult;
                    };
                }
            }
            namespace download {
                interface Params extends datasets._account._dataset.Params {
                    ext: string;
                }
                interface Get {
                    Req: {
                        Query: GenericQuery & {
                            graph?: string;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: any;
                    };
                }
            }
            namespace jobs {
                interface Post {
                    Req: {
                        Query: {};
                        Params: Params;
                        Body: {
                            type?: Models.JobTypes;
                            url?: string;
                            downloadUrls?: string[];
                            defaultGraphName?: string;
                            baseIRI?: string;
                            overwriteAll?: boolean;
                        };
                    };
                    Res: {
                        Body: Models.Job;
                    };
                }
                namespace _jobId {
                    interface Params extends datasets._account._dataset.Params {
                        jobId: string;
                    }
                    interface Get {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: Models.Job;
                        };
                    }
                    interface Delete {
                        Req: {
                            Query: {};
                            Params: Params;
                            Body: {};
                        };
                        Res: {
                            Body: {};
                        };
                    }
                    namespace add {
                        interface Post {
                            Req: {
                                Query: {};
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: Models.Job;
                            };
                        }
                    }
                    namespace start {
                        interface Post {
                            Req: {
                                Query: {};
                                Params: Params;
                                Body: {
                                    overwriteAll?: boolean;
                                };
                            };
                            Res: {
                                Body: Models.Job;
                            };
                        }
                    }
                    namespace reset {
                        interface Post {
                            Req: {
                                Query: {};
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: Models.Job;
                            };
                        }
                    }
                    namespace _sourceFileId {
                        interface Params extends datasets._account._dataset.jobs._jobId.Params {
                            sourceFileId: string;
                        }
                        interface Delete {
                            Req: {
                                Query: {};
                                Params: Params;
                                Body: {};
                            };
                            Res: {
                                Body: {};
                            };
                        }
                    }
                }
            }
        }
    }
    export {};
}
export declare namespace queries {
    interface Get {
        Req: {
            Query: GenericQuery & {
                since?: string;
                limit?: number;
                sortDirection?: "asc" | "desc";
                q?: string;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.Queries;
        };
    }
    namespace _account {
        interface Params {
            account: string;
        }
        interface Get {
            Req: {
                Query: GenericQuery & {
                    since?: string;
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                };
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.Queries;
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.QueryCreate;
            };
            Res: {
                Body: Models.Query;
            };
        }
        namespace _query {
            interface Params extends queries._account.Params {
                query: string;
                versionNr: string;
            }
            interface Get {
                Req: {
                    Query: {
                        [queryArgument: string]: string;
                    } & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: Models.Query | string;
                };
            }
            interface Patch {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Models.QueryMetaUpdate;
                };
                Res: {
                    Body: Models.Query;
                };
            }
            interface Post {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Models.QueryVersionUpdate;
                };
                Res: {
                    Body: Models.Query;
                };
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
            namespace run {
                interface Get {
                    Req: {
                        Query: {
                            [queryArgument: string]: string;
                        } & GenericQuery;
                        Params: Params;
                        Body: {
                            [queryArgument: string]: string;
                        };
                    };
                    Res: {
                        Body: any;
                    };
                }
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {
                            [queryArgument: string]: string;
                        };
                    };
                    Res: {
                        Body: any;
                    };
                }
            }
        }
    }
}
export declare namespace stories {
    interface Get {
        Req: {
            Query: GenericQuery & {
                since?: string;
                limit?: number;
                sortDirection?: "asc" | "desc";
                q?: string;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.Story[];
        };
    }
    namespace _account {
        interface Params {
            account: string;
        }
        interface Get {
            Req: {
                Query: GenericQuery & {
                    since?: string;
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                };
                Params: Params;
                Body: {};
            };
            Res: {
                Body: Models.Story[];
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.StoryCreate;
            };
            Res: {
                Body: Models.Story;
            };
        }
        namespace _story {
            interface Params extends stories._account.Params {
                story: string;
            }
            interface Get {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: Models.Story;
                };
            }
            interface Patch {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Models.StoryUpdate;
                };
                Res: {
                    Body: Models.Story;
                };
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
            namespace copy {
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {
                            toAccount: string;
                        };
                    };
                    Res: {
                        Body: Models.Story;
                    };
                }
            }
            namespace chown {
                interface Post {
                    Req: {
                        Query: {} & GenericQuery;
                        Params: Params;
                        Body: {
                            toAccount: string;
                        };
                    };
                    Res: {
                        Body: Models.Story;
                    };
                }
            }
            namespace banner {
                interface Get {
                    Req: {
                        Query: {
                            v?: number;
                            w?: number;
                            h?: number;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Story;
                    };
                }
                interface Post {
                    Req: {
                        Query: GenericQuery & {
                            verbose?: string;
                        };
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Story;
                    };
                }
                interface Delete {
                    Req: {
                        Query: {};
                        Params: Params;
                        Body: {};
                    };
                    Res: {
                        Body: Models.Story;
                    };
                }
            }
        }
    }
}
export declare namespace search {
    namespace datasets {
        interface Get {
            Req: {
                Query: GenericQuery & {
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                    q?: string;
                    offset?: number;
                    limit?: number;
                };
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.Dataset[];
            };
        }
    }
    namespace stories {
        interface Get {
            Req: {
                Query: GenericQuery & {
                    offset?: number;
                    limit?: number;
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                    q?: string;
                };
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.Story[];
            };
        }
    }
    namespace queries {
        interface Get {
            Req: {
                Query: GenericQuery & {
                    offset?: number;
                    limit?: number;
                    sortBy?: "createdAt" | "updatedAt" | "name";
                    sortDirection?: "asc" | "desc";
                    q?: string;
                };
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.Queries;
            };
        }
    }
}
export declare namespace _some {
    interface Get {
        Req: {
            Query: GenericQuery & {
                q?: string;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: {
                datasets: Models.Dataset[];
                stories: Models.Story[];
                queries: Models.Query[];
            };
        };
    }
    namespace _account {
        interface Get {
            Req: {
                Query: GenericQuery & {
                    q?: string;
                    exclude?: string;
                };
                Params: {};
                Body: {};
            };
            Res: {
                Body: {
                    datasets: Models.Dataset[];
                    stories: Models.Story[];
                    queries: Models.Query[];
                };
            };
        }
    }
}
export declare namespace _internalService {
    namespace _serviceId {
        namespace _filestorageId {
            interface Params {
                serviceId: string;
                filestorageId: string;
            }
            export interface Get {
                Req: {
                    Query: {};
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: any;
                };
            }
            export {};
        }
    }
}
export declare namespace account {
    interface Get {
        Req: {
            Query: GenericQuery & {
                verbose?: "";
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.Account;
        };
    }
    interface Patch {
        Req: {
            Query: GenericQuery & {
                verbose?: string | null;
            };
            Params: {};
            Body: Models.AccountUpdate;
        };
        Res: {
            Body: Models.Account;
        };
    }
    interface Delete {
        Req: {
            Query: {} & GenericQuery;
            Params: {};
            Body: {};
        };
        Res: {
            Body: {};
        };
    }
    namespace orgs {
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.Org[];
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: Models.AccountUpdate;
            };
            Res: {
                Body: Models.Org;
            };
        }
    }
    namespace members {
        namespace _member {
            interface Params {
                member: string;
            }
            interface Get {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: Models.OrgMember;
                };
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
            interface Patch {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {
                        role: Models.OrgRole;
                    };
                };
                Res: {
                    Body: Models.OrgMember;
                };
            }
        }
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.OrgMember[];
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: {
                    accountName: string;
                    role: Models.OrgRole;
                };
            };
            Res: {
                Body: Models.OrgMember;
            };
        }
    }
    namespace tokens {
        namespace _tokenId {
            interface Params {
                tokenId: string;
            }
            interface Get {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: Models.Token;
                };
            }
            interface Patch {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: Partial<Models.Token>;
                };
                Res: {
                    Body: Models.Token;
                };
            }
            interface Delete {
                Req: {
                    Query: {} & GenericQuery;
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
        }
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: {};
            };
            Res: {
                Body: Models.Token[];
            };
        }
        interface Post {
            Req: {
                Query: {} & GenericQuery;
                Params: {};
                Body: Models.CreateToken;
            };
            Res: {
                Body: Models.Token;
            };
        }
    }
}
export import me = account;
export declare namespace accounts {
    export import _account = account;
    interface Get {
        Req: {
            Query: {
                type?: Models.AccountType;
                q?: string;
                offset?: number;
                substring?: string;
                sortBy?: "createdAt" | "updatedAt" | "accountNameLower";
                sortDirection?: "asc" | "desc";
                limit?: number;
            } & GenericQuery;
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.Account[];
        };
    }
}
export declare namespace topics {
    interface Get {
        Req: {
            Query: GenericQuery & {
                q?: string;
                since?: string;
                limit?: number;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.Topic[];
        };
    }
    interface Put {
        Req: {
            Query: {} & GenericQuery;
            Params: {};
            Body: Models.TopicUpdates;
        };
        Res: {
            Body: Models.Topic[];
        };
    }
    interface Patch {
        Req: {
            Query: {} & GenericQuery;
            Params: {};
            Body: Models.TopicUpdates;
        };
        Res: {
            Body: Models.Topic[];
        };
    }
    namespace _topicId {
        interface Params {
            topicId: string;
        }
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: {
                    topicId: string;
                };
                Body: {};
            };
            Res: {
                Body: Models.Topic;
            };
        }
        interface Patch {
            Req: {
                Query: {} & GenericQuery;
                Params: {
                    topicId: string;
                };
                Body: Models.TopicUpdate;
            };
            Res: {
                Body: Models.Topic;
            };
        }
        interface Delete {
            Req: {
                Query: {} & GenericQuery;
                Params: {
                    topicId: string;
                };
                Body: {};
            };
            Res: {
                Body: {};
            };
        }
    }
}
export declare namespace redirect {
    interface Get {
        Req: {
            Query: GenericQuery & {
                iri?: string;
            };
            Params: {
                iri?: string;
            };
            Body: {};
        };
        Res: {
            Body: {};
        };
    }
}
export declare namespace search {
    interface Get {
        Req: {
            Query: GenericQuery & {
                q?: string;
                accountName?: string;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.SearchResults;
        };
    }
}
export declare namespace shortUrl {
    interface Get {
        Req: {
            Query: GenericQuery & {
                shortUrl: string;
            };
            Params: {};
            Body: {};
        };
        Res: {
            Body: Models.ShortUrl;
        };
    }
    interface Post {
        Req: {
            Query: {} & GenericQuery;
            Params: {};
            Body: {
                longUrl: string;
            };
        };
        Res: {
            Body: Models.ShortUrl;
        };
    }
}
export declare namespace s {
    namespace _short {
        interface Params {
            short: string;
        }
        interface Get {
            Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
            };
            Res: {
                Body: {};
            };
        }
    }
}
export declare namespace web {
    interface Params {
    }
    namespace auth {
        interface Params {
        }
        namespace oauth {
            interface Params {
            }
            interface Get {
                Req: {
                    Query: GenericQuery & {
                        from: Models.RegisterOrLogin;
                    };
                    Params: Params;
                    Body: {};
                };
                Res: {
                    Body: {};
                };
            }
        }
    }
}
