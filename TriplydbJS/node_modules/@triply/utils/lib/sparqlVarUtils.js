"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterSuggestions = exports.parseAndInjectVariablesIntoQuery = exports.parseAndInjectVariablesIntoQueryAndGetInfo = exports.BadArgumentsError = exports.REGEX_REPLACE_STRING_DATATYPE = exports.getGenerator = exports.getParser = void 0;
const sparqljs_1 = require("sparqljs");
const lodash_1 = __importStar(require("lodash"));
const N3 = __importStar(require("n3"));
const eachDeep = require("deepdash/getEachDeep")(lodash_1.default);
const rdf_string_1 = require("rdf-string");
const Constants_1 = require("./Constants");
function getParser() {
    return new sparqljs_1.Parser({ skipUngroupedVariableCheck: true });
}
exports.getParser = getParser;
function getGenerator() {
    return new sparqljs_1.Generator({ allPrefixes: true });
}
exports.getGenerator = getGenerator;
const SparqlParser = getParser();
const SparqlGenerator = getGenerator();
const stringDatatype = "http://www.w3.org/2001/XMLSchema#string";
exports.REGEX_REPLACE_STRING_DATATYPE = new RegExp(lodash_1.escapeRegExp(`^^<${stringDatatype}>`), "gm");
function stringifySparqlQuery(query) {
    return SparqlGenerator.stringify(query).replace(exports.REGEX_REPLACE_STRING_DATATYPE, "");
}
class BadArgumentsError extends Error {
    constructor(message) {
        super(message);
        this.name = "BadArgumentsError";
    }
}
exports.BadArgumentsError = BadArgumentsError;
function parseAndInject(query, opts) {
    const { variableDefinitions, variableValues, page, pageSize } = opts;
    SparqlParser._resetBlanks();
    const parsedQuery = SparqlParser.parse(query);
    if (variableDefinitions.length > 0) {
        for (const p in parsedQuery.prefixes) {
            if (parsedQuery.prefixes[p] === "http://www.w3.org/2001/XMLSchema#") {
                delete parsedQuery.prefixes[p];
            }
        }
        eachDeep(parsedQuery, (term, key, parentValue) => {
            if (term && term.termType === "Variable") {
                const variableDefinition = variableDefinitions.find((v) => v.name === term.value);
                if (!variableDefinition)
                    return;
                const v = variableValues[term.value] || (variableDefinition === null || variableDefinition === void 0 ? void 0 : variableDefinition.defaultValue);
                if (v) {
                    let newVal;
                    if (variableDefinition.termType === "NamedNode") {
                        newVal = N3.DataFactory.namedNode(v);
                    }
                    else {
                        if (variableDefinition.language) {
                            newVal = N3.DataFactory.literal(v, variableDefinition.language);
                        }
                        else if (variableDefinition.datatype) {
                            newVal = N3.DataFactory.literal(v, N3.DataFactory.namedNode(variableDefinition.datatype));
                        }
                        else {
                            newVal = N3.DataFactory.literal(v);
                        }
                    }
                    parentValue[key] = newVal;
                    return false;
                }
            }
        });
    }
    if (page !== undefined || pageSize !== undefined) {
        if (parsedQuery.type !== "query") {
            throw new BadArgumentsError("Arguments `page` and `pageSize` are not supported for update queries");
        }
        if (parsedQuery.queryType === "ASK") {
            throw new BadArgumentsError("Arguments `page` and `pageSize` only apply to queries of type `SELECT`, `CONSTRUCT` and `DESCRIBE`.");
        }
        const appliedPageSize = pageSize !== undefined ? pageSize : Constants_1.SPARQL_RESULT_DEFAULT_PAGE_SIZE;
        const appliedPage = page !== undefined ? page : 1;
        parsedQuery.limit = appliedPageSize;
        parsedQuery.offset = (appliedPage - 1) * appliedPageSize;
    }
    return parsedQuery;
}
function parseAndInjectVariablesIntoQueryAndGetInfo(query, opts) {
    try {
        const queryWithInjectedVariables = parseAndInject(query, opts);
        return {
            query: stringifySparqlQuery(queryWithInjectedVariables),
            isConstructQuery: queryWithInjectedVariables.type === "query" && queryWithInjectedVariables.queryType === "CONSTRUCT",
            limit: queryWithInjectedVariables.limit,
            offset: queryWithInjectedVariables.offset,
        };
    }
    catch (e) {
        if (opts.page === undefined && opts.pageSize === undefined && opts.variableDefinitions.length === 0)
            return { query };
        throw e;
    }
}
exports.parseAndInjectVariablesIntoQueryAndGetInfo = parseAndInjectVariablesIntoQueryAndGetInfo;
function parseAndInjectVariablesIntoQuery(query, opts) {
    const { variableDefinitions, page, pageSize } = opts;
    if (variableDefinitions.length === 0 && page === undefined && pageSize === undefined) {
        return query;
    }
    return stringifySparqlQuery(parseAndInject(query, opts));
}
exports.parseAndInjectVariablesIntoQuery = parseAndInjectVariablesIntoQuery;
function filterSuggestions(forVariableConfiguration, suggestions) {
    return suggestions
        .map((suggestedString) => {
        const suggestedTerm = rdf_string_1.stringToTerm(suggestedString);
        if (suggestedTerm.termType !== forVariableConfiguration.termType)
            return undefined;
        if (suggestedTerm.termType === "Literal" && forVariableConfiguration.termType === "Literal") {
            if ("datatype" in forVariableConfiguration) {
                if (suggestedTerm.datatype.value !== `<${forVariableConfiguration.datatype}>`)
                    return undefined;
            }
            else if ("language" in forVariableConfiguration) {
                if (suggestedTerm.language !== forVariableConfiguration.language)
                    return undefined;
            }
            else {
                if ((suggestedTerm === null || suggestedTerm === void 0 ? void 0 : suggestedTerm.datatype.value) !== "http://www.w3.org/2001/XMLSchema#string" || suggestedTerm.language)
                    return undefined;
            }
        }
        return suggestedTerm.value;
    })
        .filter((s) => !!s);
}
exports.filterSuggestions = filterSuggestions;
//# sourceMappingURL=sparqlVarUtils.js.map