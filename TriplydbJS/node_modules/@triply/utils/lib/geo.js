"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFirstPointFromWkt = exports.getFirstPointFromWktString = exports.validateWkt = exports.isValidWkt = exports.parseWkt = void 0;
const parseWellknown = require("wellknown");
const CRS_REGEX = new RegExp("^<(.*)>s*(.*)");
function parseWkt(wktString, supportedCrs = ["http://www.opengis.net/def/crs/EPSG/0/4326"]) {
    if (!wktString)
        throw new Error("No wkt string given.");
    wktString = wktString.trim();
    let crs = undefined;
    if (wktString[0] === "<") {
        const matches = wktString.match(CRS_REGEX);
        if (!matches) {
            throw new Error("Could not parse wkt.");
        }
        crs = matches[1];
        if (supportedCrs.indexOf(crs) === -1)
            throw new Error(`CRS ${crs} is not supported.`);
        wktString = matches[2].trim();
    }
    const parsedWkt = parseWellknown(wktString);
    validateWkt(parsedWkt);
    return {
        wkt: parsedWkt,
        crs,
    };
}
exports.parseWkt = parseWkt;
function isValidWkt(wktString, supportedCrs = ["http://www.opengis.net/def/crs/EPSG/0/4326"]) {
    try {
        parseWkt(wktString, supportedCrs);
        return true;
    }
    catch {
        return false;
    }
}
exports.isValidWkt = isValidWkt;
function validateWkt(wkt) {
    if (!wkt)
        throw new Error("Could not parse wkt.");
    switch (wkt.type) {
        case "Point":
            if (wkt.coordinates.length === 1)
                throw new Error("Invalid WKT point");
            break;
        case "MultiPoint":
        case "LineString":
            wkt.coordinates.forEach((coordinate) => {
                if (coordinate === undefined || !coordinate.length)
                    throw new Error("Invalid WKT segment");
            });
            break;
        case "Polygon":
        case "MultiLineString":
            wkt.coordinates.forEach((point) => {
                if (point === undefined || !point.length)
                    throw new Error("Invalid WKT segment");
                point.forEach((coordinate) => {
                    if (coordinate === undefined || !coordinate.length) {
                        throw new Error("Invalid WKT segment");
                    }
                });
            });
            break;
        case "MultiPolygon":
            wkt.coordinates.forEach((polygon) => {
                if (polygon === undefined || !polygon.length)
                    throw new Error("Invalid WKT segment");
                polygon.forEach((point) => {
                    if (point === undefined || !point.length)
                        throw new Error("Invalid WKT segment");
                    point.forEach((coordinate) => {
                        if (coordinate === undefined || !coordinate.length) {
                            throw new Error("Invalid WKT segment");
                        }
                    });
                });
            });
            break;
        case "GeometryCollection":
            wkt.geometries.forEach((geom) => validateWkt(geom));
            break;
        default:
            throw new Error(`Unknown wkt type ${wkt.type}`);
    }
}
exports.validateWkt = validateWkt;
function getFirstPointFromWktString(wktString) {
    try {
        const parsedWkt = parseWkt(wktString);
        const firstPoint = getFirstPointFromWkt(parsedWkt.wkt);
        if (!firstPoint)
            return firstPoint;
        if (parsedWkt.crs)
            firstPoint.crs = parsedWkt.crs;
        return firstPoint;
    }
    catch {
        return undefined;
    }
}
exports.getFirstPointFromWktString = getFirstPointFromWktString;
function getFirstPointFromWkt(wkt) {
    try {
        switch (wkt.type) {
            case "Point":
                return { longitude: wkt.coordinates[0], latitude: wkt.coordinates[1] };
            case "MultiPoint":
            case "LineString":
                return { longitude: wkt.coordinates[0][0], latitude: wkt.coordinates[0][1] };
            case "Polygon":
            case "MultiLineString":
                return { longitude: wkt.coordinates[0][0][0], latitude: wkt.coordinates[0][0][1] };
            case "MultiPolygon":
                return { longitude: wkt.coordinates[0][0][0][0], latitude: wkt.coordinates[0][0][0][1] };
            case "GeometryCollection":
                return getFirstPointFromWkt(wkt.geometries[0]);
            default: {
                console.info(`Unknown wkt type ${wkt.type}`);
                return undefined;
            }
        }
    }
    catch (e) {
        return undefined;
    }
}
exports.getFirstPointFromWkt = getFirstPointFromWkt;
exports.default = parseWellknown;
//# sourceMappingURL=geo.js.map