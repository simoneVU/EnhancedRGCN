import { NTriplyTerm } from "./";
export declare const HDT_MIN_STATEMENTS: 1;
export declare const HDT_MAX_STATEMENTS: 10000;
export declare const SERVICE_TYPES: readonly ["sparql", "sparql-jena", "elasticsearch"];
export declare const QUERY_TYPES: readonly ["sparql", "search"];
export declare const MAX_EXAMPLE_RESOURCES: 30;
export declare const MAX_DATASET_NAME_LENGTH: 40;
export declare const MAX_ACCOUNT_NAME_LENGTH: 40;
export declare const MAX_SERVICE_NAME_LENGTH: 40;
export declare const MAX_QUERY_NAME_LENGTH: 40;
export declare const MAX_STORY_NAME_LENGTH: 40;
export declare const MAX_GRAPHS_ON_LANDING_PAGE: 10;
export declare const BACKWARD_SUBJECTS_PAGE_SIZE: 40;
export declare const FORWARD_OBJECT_PAGE_SIZE: 10;
export declare const BACKWARD_PREDICATES_PAGE_SIZE: 10;
export declare const FORWARD_PREDICATES_PAGE_SIZE: 50;
export declare const SPARQL_RESULT_SET_MAX_ROWS: 10000;
export declare const SPARQL_RESULT_DEFAULT_PAGE_SIZE: 100;
export declare const SPARQL_RETRY_CONSTRUCT_SHRINK_FACTOR: 0.8;
export declare const AVATAR_SIZE_LIMIT: "5mb";
export declare const GENERIC_FILE_UPLOAD_ERROR_MESSAGE: "An error occurred while uploading the file.";
export declare const DUPLICATE_ASSETNAME_ERROR_MESSAGE: "An asset with this name has already been uploaded.";
export declare const CANT_CREATE_ZERO_GRAPH_SERVICE_MESSAGE = "Cannot create a service for a dataset without graphs.";
export declare const NO_ACCOUNTS_LEFT_MESSAGE = "There are currently no more available accounts.";
export declare const SUBSCRIPTIONS_PAGE = "https://triply.cc/subscriptions";
export declare const SPARQL_VARNAME_CHARS = "[0-9a-zA-Z_\u00C0-\u00D6\u00D8-\u00F6\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]";
export declare const SUPPORTED_EXTENSIONS: readonly ["gz", "bz2", "xz", "tar", "zip", "tgz", "rdf", "rdfs", "owx", "owl", "nt", "ttl", "nq", "trig", "n3"];
export declare type SupportedExtension = typeof SUPPORTED_EXTENSIONS[number];
export interface ObjectFilter<T> {
    value?: string;
    language?: string;
    datatype?: string;
    termType?: NTriplyTerm["termType"];
    validationFunction?: (term: T) => boolean;
}
export declare type QueryPattern<T extends {
    termType: NTriplyTerm["termType"];
}> = [
    string?,
    ObjectFilter<T>?,
    string?,
    ObjectFilter<T>?
];
export declare const RESOURCE_WIDGET_PATTERNS: {
    IMAGE_PATTERNS: QueryPattern<NTriplyTerm>[];
    LABEL_PATTERNS: QueryPattern<NTriplyTerm>[];
    GEO_PATTERNS: QueryPattern<NTriplyTerm>[];
    LAT_PATTERNS: QueryPattern<NTriplyTerm>[];
    LONG_PATTERNS: QueryPattern<NTriplyTerm>[];
    AUDIO_PATTERNS: QueryPattern<NTriplyTerm>[];
    VIDEO_PATTERNS: QueryPattern<NTriplyTerm>[];
    MEDIA_PATTERNS: QueryPattern<NTriplyTerm>[];
    MEDIA_ENCODING_PATTERNS: QueryPattern<NTriplyTerm>[];
};
export declare const METADATA_IRI_FOR_CLASS_UNKNOWN: "UNKNOWN:unknown";
