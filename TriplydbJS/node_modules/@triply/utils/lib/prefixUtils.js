"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrefixed = exports.getPrefixInfoFromIri = exports.getPrefixInfoFromPrefixedValue = exports.getLocalNameInfo = void 0;
const urlParse = require("url-parse");
const getLastSlashIndex = (pathname, offset) => {
    if (offset === undefined)
        offset = pathname.length;
    const i = pathname.lastIndexOf("/", offset);
    if (i >= 0 && i === pathname.length - 1) {
        if (offset < 0)
            return i;
        return getLastSlashIndex(pathname, offset - 1);
    }
    return i;
};
function getLocalNameInfo(iri) {
    const parsed = urlParse(iri);
    if (parsed.hash.length > 1) {
        var hashContent = parsed.hash.substr(1);
        parsed.set("hash", "#");
        return {
            iri: parsed.toString(),
            localName: hashContent,
        };
    }
    const i = getLastSlashIndex(parsed.pathname);
    if (i >= 0) {
        const localName = parsed.pathname.substr(i + 1) + parsed.query + parsed.hash;
        if (localName && localName.length) {
            parsed.set("pathname", parsed.pathname.substr(0, i + 1));
            parsed.set("query", "");
            parsed.set("hash", "");
            return {
                iri: parsed.toString(),
                localName: localName,
            };
        }
    }
    return { iri: iri };
}
exports.getLocalNameInfo = getLocalNameInfo;
function getPrefixInfoFromPrefixedValue(value, prefixes) {
    for (var p of prefixes) {
        var pref = Array.isArray(p) ? p[1] : p;
        if (!pref.prefixLabel)
            continue;
        if (value.lastIndexOf(pref.prefixLabel + ":", 0) === 0) {
            return {
                prefixLabel: pref.prefixLabel,
                iri: pref.iri,
                localName: value.substr(pref.prefixLabel.length + 1),
            };
        }
    }
    return getLocalNameInfo(value);
}
exports.getPrefixInfoFromPrefixedValue = getPrefixInfoFromPrefixedValue;
function getPrefixInfoFromIri(value, prefixes) {
    const matches = [];
    for (var p of prefixes) {
        var pref = Array.isArray(p) ? p[1] : p;
        if (value.length > pref.iri.length && value.lastIndexOf(pref.iri, 0) === 0) {
            matches.push({
                prefixLabel: pref.prefixLabel,
                iri: pref.iri,
                localName: value.substr(pref.iri.length),
            });
        }
    }
    return matches.sort((a, b) => b.iri.length - a.iri.length)[0] || getLocalNameInfo(value);
}
exports.getPrefixInfoFromIri = getPrefixInfoFromIri;
function getPrefixed(value, prefixes) {
    const info = getPrefixInfoFromIri(value, prefixes);
    if (info && info.prefixLabel)
        return `${info.prefixLabel}:${info.localName}`;
}
exports.getPrefixed = getPrefixed;
//# sourceMappingURL=prefixUtils.js.map