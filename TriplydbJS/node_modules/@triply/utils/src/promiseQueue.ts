import { range } from "lodash";

export interface PromiseQueueOptions {
  concurrent: number;
}
export type PromiseGetter<T> = () => Promise<T>;
export default async function promiseQueue<T>(getters: Array<PromiseGetter<T>>, opts: PromiseQueueOptions) {
  const stack = [...getters];
  const result: Array<T> = [];
  async function getFromStack(): Promise<T | undefined> {
    const getter = stack.shift();
    if (getter === undefined) return; //we're done
    result.push(await getter());
    await getFromStack();
  }
  await Promise.all(range(opts.concurrent).map(() => getFromStack()));
  return result;
}
