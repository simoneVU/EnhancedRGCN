import * as Immutable from "immutable";

const urlParse = require("url-parse");
export interface Prefix {
  prefixLabel: string;
  iri: string;
  scope?: "global" | "local";
}
export interface PrefixInfo {
  iri: string;
  localName?: string;
  prefixLabel?: string;
}

export type PrefixesArray = Array<Prefix>;
export type PrefixMap = Immutable.OrderedMap<string, Prefix>;

const getLastSlashIndex = (pathname: string, offset?: number): number => {
  if (offset === undefined) offset = pathname.length;
  const i = pathname.lastIndexOf("/", offset);
  if (i >= 0 && i === pathname.length - 1) {
    //this is the last char. For paths with a trailing slash,
    //we want the parent pathname as localname, so go back in the string
    if (offset < 0) return i;
    return getLastSlashIndex(pathname, offset - 1);
  }
  return i;
};

export function getLocalNameInfo(iri: string): PrefixInfo {
  const parsed = urlParse(iri);

  if (parsed.hash.length > 1) {
    var hashContent = parsed.hash.substr(1);
    parsed.set("hash", "#");
    return {
      iri: parsed.toString(),
      localName: hashContent,
    };
  }

  const i = getLastSlashIndex(parsed.pathname);

  if (i >= 0) {
    const localName = parsed.pathname.substr(i + 1) + parsed.query + parsed.hash;
    if (localName && localName.length) {
      parsed.set("pathname", parsed.pathname.substr(0, i + 1));
      parsed.set("query", "");
      parsed.set("hash", "");
      return {
        iri: parsed.toString(),
        localName: localName,
      };
    }
  }

  return { iri: iri };
}

export function getPrefixInfoFromPrefixedValue(value: string, prefixes: PrefixesArray | PrefixMap): PrefixInfo {
  for (var p of prefixes) {
    var pref: Prefix = Array.isArray(p) ? p[1] : p;
    if (!pref.prefixLabel) continue;
    if (value.lastIndexOf(pref.prefixLabel + ":", 0) === 0) {
      return {
        prefixLabel: pref.prefixLabel,
        iri: pref.iri,
        localName: value.substr(pref.prefixLabel.length + 1),
      };
    }
  }
  return getLocalNameInfo(value);
}

export function getPrefixInfoFromIri(value: string, prefixes: PrefixesArray | PrefixMap): PrefixInfo;
export function getPrefixInfoFromIri(value: string, prefixes: any): PrefixInfo {
  const matches = [];
  for (var p of prefixes) {
    var pref: Prefix = Array.isArray(p) ? p[1] : p;
    if (value.length > pref.iri.length && value.lastIndexOf(pref.iri, 0) === 0) {
      matches.push({
        prefixLabel: pref.prefixLabel,
        iri: pref.iri,
        localName: value.substr(pref.iri.length),
      });
    }
  }
  return matches.sort((a, b) => b.iri.length - a.iri.length)[0] || getLocalNameInfo(value);
}

export function getPrefixed(value: string, prefixes: PrefixesArray | PrefixMap): string;
export function getPrefixed(value: string, prefixes: any): string | undefined {
  const info = getPrefixInfoFromIri(value, prefixes);
  if (info && info.prefixLabel) return `${info.prefixLabel}:${info.localName}`;
}
