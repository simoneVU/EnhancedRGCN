import * as Models from "./Models";

export interface RequestTemplate {
  Query: {};
  Params: {};
  Body: any;
}

export interface ResponseTemplate {
  Body: any;
}

export interface HttpMethodTemplate {
  Req: RequestTemplate;
  Res: ResponseTemplate;
}

export type AllParams = info.Params &
  imgs.Params &
  imgs.avatars.a._accountId.Params &
  imgs.avatars.d._datasetId.Params &
  imgs.logos.Params &
  admin.Params &
  admin.services._serviceId.Params &
  ___prefixes.Params &
  ___prefixes._prefix.Params &
  datasets._account.Params &
  datasets._account._dataset.Params &
  datasets._account._dataset.services._serviceName.Params &
  datasets._account._dataset.graphs._graphId.Params &
  datasets._account._dataset.hooks._hookId.Params &
  datasets._account._dataset.assets._assetId.Params &
  datasets._account._dataset.assets._assetId._versionId.Params &
  datasets._account._dataset.download.Params &
  datasets._account._dataset.jobs._jobId.Params &
  datasets._account._dataset.jobs._jobId._sourceFileId.Params &
  queries._account.Params &
  queries._account._query.Params &
  stories._account.Params &
  stories._account._story.Params &
  topics._topicId.Params &
  account.members._member.Params &
  account.tokens._tokenId.Params &
  s._short.Params;
export interface GenericQuery {
  fields?: string;
}
export namespace info {
  export interface Params {}
  export interface Get {
    Req: {
      Query: GenericQuery & {};
      Params: Params;
      Body: {};
    };
    Res: {
      Body: Models.ClientConfig;
    };
  }
  export interface Patch {
    Req: {
      Query: {} & GenericQuery;
      Params: Params;
      Body: Models.ClientConfigUpdate;
    };
    Res: {
      Body: Models.ClientConfig;
    };
  }
}

export namespace imgs {
  export interface Params {}
  export interface Get {
    Req: {
      Query: GenericQuery & {
        v?: number;
        w?: number;
        h?: number;
      };
      Params: Params;
      Body: {};
    };
    Res: {
      Body: Buffer;
    };
  }

  export namespace avatars {
    export namespace a {
      export namespace _accountId {
        export interface Params {
          accountId: string;
        }
        export interface Get {
          Req: {
            Query: GenericQuery & {
              v?: number;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: {};
          };
        }
        export interface Post {
          Req: {
            Query: GenericQuery & {
              verbose?: string;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Account;
          };
        }
      }
    }
    export namespace d {
      export namespace _datasetId {
        export interface Params {
          datasetId: string;
        }
        export interface Get {
          Req: {
            Query: GenericQuery & {
              v?: number;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: {};
          };
        }
        export interface Post {
          Req: {
            Query: GenericQuery & {};
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Dataset;
          };
        }
      }
    }
  }

  export namespace logos {
    export interface Params {}
    export interface Get {
      Req: {
        Query: {
          v?: number;
          w?: number;
          h?: number;
        };
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Buffer;
      };
    }
    export interface Post {
      Req: {
        Query: {};
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.ClientConfig;
      };
    }
    export interface Delete {
      Req: {
        Query: {};
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.ClientConfig;
      };
    }
  }
}

export namespace admin {
  export interface Params {}
  export namespace cache {
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.AdminCacheUpdate;
      };
      Res: {
        Body: {};
      };
    }
  }
  export namespace debug {
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.AdminDebugUpdate;
      };
      Res: {
        Body: {};
      };
    }
  }
  export namespace jobs {
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.Dataset[];
      };
    }
  }
  export namespace limits {
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.InstanceLimitsJson;
      };
    }
  }
  export namespace redirects {
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.RedirectRule[];
      };
    }
    export interface Put {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.RedirectRule[];
      };
      Res: {
        Body: Models.RedirectRule[];
      };
    }
  }
  export namespace services {
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.ServiceList;
      };
    }
    export namespace _serviceId {
      export interface Params {
        serviceId: string;
      }
      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
    }
  }
}

//Used in root path, and in /datasets/<u>/<d>/
export namespace ___prefixes {
  export interface Params {}
  export interface Get {
    Req: {
      Query: GenericQuery & {
        scope?: "local" | "global";
      };
      Params: Params;
      Body: {};
    };
    Res: {
      Body: Models.Prefixes;
    };
  }

  export interface Patch {
    Req: {
      Query: {} & GenericQuery;
      Params: Params;
      Body: Models.PrefixUpdate[];
    };
    Res: {
      Body: Models.Prefixes;
    };
  }

  export interface Put {
    Req: {
      Query: {} & GenericQuery;
      Params: Params;
      Body: Models.PrefixUpdate[];
    };
    Res: {
      Body: Models.Prefixes;
    };
  }

  export namespace _prefix {
    export interface Params {
      prefix: string;
    }
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.Prefix;
      };
    }
    export interface Put {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: string;
      };
      Res: {
        Body: Models.Prefix;
      };
    }
    export interface Delete {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: string;
      };
    }
  }
}
export import prefixes = ___prefixes;

export namespace datasets {
  interface PaginatedDatasetQuery {
    since?: string;
    limit?: number;
    sortDirection?: "asc" | "desc";
    sparql?: string;
    q?: string;
  }
  export interface Get<Verbose = false> {
    Req: {
      Query: Verbose extends true
        ? GenericQuery &
            PaginatedDatasetQuery & {
              verbose: ""; //We should be able to pass it as `?verbose`
            }
        : GenericQuery & PaginatedDatasetQuery;
      Params: {};
      Body: {};
    };
    Res: {
      Body: Verbose extends true ? Models.DatasetVerbose[] : Models.Dataset[];
    };
  }
  export namespace _account {
    export interface Params {
      account: string;
    }
    export interface Get {
      Req: {
        Query: GenericQuery & {
          since?: string;
          accessLevel?: "public" | "internal" | "private";
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
        };
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.Dataset[];
      };
    }
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.NewDataset;
      };
      Res: {
        Body: Models.Dataset;
      };
    }

    export namespace _dataset {
      export import prefixes = ___prefixes;
      export interface Params extends datasets._account.Params {
        dataset: string;
      }
      export interface Get<Verbose = false> {
        Req: {
          Query: Verbose extends true
            ? GenericQuery & {
                verbose: null; //Set to null, because we should be able to pass it as `?verbose`
              }
            : GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: Verbose extends true ? Models.DatasetVerbose : Models.Dataset;
        };
      }
      export interface Post {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Models.NewDataset;
        };
        Res: {
          Body: Models.Dataset;
        };
      }
      export interface Patch {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Models.UpdateDataset;
        };
        Res: {
          Body: Models.Dataset;
        };
      }
      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
      export namespace copy {
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.NewDataset;
          };
          Res: {
            Body: Models.Dataset;
          };
        }
      }
      export namespace chown {
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.NewDataset;
          };
          Res: {
            Body: Models.Dataset;
          };
        }
      }
      export namespace services {
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.UpdateService;
          };
          Res: {
            Body: Models.Service;
          };
        }
        export interface Get {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.ServiceList;
          };
        }

        export namespace _serviceName {
          export interface Params extends datasets._account._dataset.Params {
            serviceName: string;
          }
          export namespace sparql {
            export interface Get {
              Req: {
                Query: Models.SparqlQuery;
                Params: Params;
                Body: Models.SparqlQuery;
              };
              Res: {
                Body: any;
              };
            }
            export interface Post {
              Req: {
                Query: Models.SparqlQuery;
                Params: Params;
                Body: Models.SparqlQuery;
              };
              Res: {
                Body: any;
              };
            }
          }
          export namespace search {
            export interface Get {
              Req: {
                Query: Models.SimpleSearchQuery;
                Params: Params;
                Body: {};
              };
              Res: {
                Body: any;
              };
            }
            export interface Post {
              Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: Models.AdvancedSearchQuery;
              };
              Res: {
                Body: any;
              };
            }
          }
          export interface Get {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.Service;
            };
          }

          export interface Delete {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: undefined;
            };
          }
          export interface Post {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: Models.ServiceActions;
            };
            Res: {
              Body: Models.Service;
            };
          }
        }
      }
      export namespace graphs {
        export interface Get {
          Req: {
            Query: GenericQuery & {
              since?: string;
              sortBy?: "graphName";
              sortDirection?: "asc" | "desc";
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Graphs;
          };
        }
        export interface Delete {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Graphs;
          };
        }

        export namespace _graphId {
          export interface Params extends datasets._account._dataset.Params {
            graphId: string;
          }
          export interface Get {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.Graph;
            };
          }

          export interface Patch {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: Partial<Models.Graph>;
            };
            Res: {
              Body: Models.Graph;
            };
          }

          export interface Delete {
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: {};
            };
          }
        }
      }

      export namespace insights {
        export namespace classFrequency {
          export interface Get {
            Req: {
              Query: {
                graphName: string;
                offset?: number;
              } & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.ClassFrequency;
            };
          }
        }

        export namespace classHierarchy {
          export interface Get {
            Req: {
              Query: GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.ClassHierarchy;
            };
          }
        }
      }

      /////////////////////////////////////////////////
      export namespace hooks {
        export interface Get {
          // get all hooks

          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Hooks;
          };
        }

        export interface Post {
          // post single hook
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.HookCreate;
          };
          Res: {
            Body: Models.Hook;
          };
        }

        export namespace _hookId {
          export interface Params extends datasets._account._dataset.Params {
            hookId: string;
          }
          // get single hook
          export interface Get {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.Hook;
            };
          }

          export interface Patch {
            // update single hook
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: Models.Hook;
            };
            Res: {
              Body: Models.Hook;
            };
          }

          export interface Delete {
            // delete single hook
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: {};
            };
          }
        }
      }

      export namespace hookRecords {
        export namespace _hookId {
          export interface Params extends datasets._account._dataset.Params {
            hookId: string;
          }
          export interface Get {
            Req: {
              Query: GenericQuery & {
                offset: number;
                limit: number;
              };
              Params: Params;
              Body: {};
            };
            Res: {
              Body: {
                records: Models.WebHookTriggerRecords;
                canLoadMore: boolean;
              };
            };
          }
        }
      }

      export namespace assets {
        export interface Get {
          Req: {
            Query: GenericQuery & {
              since?: string;
              sortBy?: "assetName";
              sortDirection?: "asc" | "desc";
              fileName?: string;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Assets | Models.Asset;
          };
        }

        export interface Post {
          Req: {
            Query: {};
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Assets;
          };
        }

        export namespace download {
          export interface Get {
            Req: {
              Query: {
                fileName: string;
              };
              Params: Params;
              Body: {};
            };
            Res: {
              Body: any;
            };
          }
        }
        export namespace _assetId {
          export interface Params extends datasets._account._dataset.Params {
            assetId: string;
          }
          export interface Get {
            Req: {
              Query: {} & GenericQuery;
              Params: Params;
              Body: {};
            };
            Res: {
              Body: any;
            };
          }

          export interface Put {
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.Assets;
            };
          }

          export interface Delete {
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: {};
            };
          }

          export namespace _versionId {
            export interface Params extends datasets._account._dataset.assets._assetId.Params {
              versionId: string;
            }
            export interface Get {
              Req: {
                Query: {} & GenericQuery;
                Params: Params;
                Body: {};
              };
              Res: {
                Body: any;
              };
            }

            export interface Delete {
              Req: {
                Query: {};
                Params: Params;
                Body: {};
              };
              Res: {
                Body: Models.Asset;
              };
            }
          }
        }
      }

      export namespace imports {
        export interface Get {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Imports;
          };
        }

        export interface Patch {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: Models.UpdateImports;
          };
          Res: {
            Body: Models.Imports;
          };
        }
      }

      export namespace statements {
        export interface Get {
          Req: {
            Query: Models.HdtQuery & Models.HdtQueryShort;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.QueryResults;
          };
        }
      }
      export namespace fragments {
        export interface Get {
          Req: {
            Query: Models.HdtQuery & { resultsSoFar?: number; limit?: number };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.QueryResults;
          };
        }
      }
      export namespace describe {
        export interface Get {
          Req: {
            Query: Models.DescribeArguments;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.QueryResults;
          };
        }
      }
      export namespace terms {
        export interface Get {
          Req: {
            Query: Models.FindTermsQuery;
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.FindTermsResult;
          };
        }
      }
      export namespace download {
        export interface Params extends datasets._account._dataset.Params {
          ext: string;
        }
        export interface Get {
          Req: {
            Query: GenericQuery & { graph?: string };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: any;
          };
        }
      }
      export namespace jobs {
        export interface Post {
          Req: {
            Query: {};
            Params: Params;
            Body: {
              type?: Models.JobTypes;
              url?: string;
              downloadUrls?: string[];
              defaultGraphName?: string;
              baseIRI?: string;
              overwriteAll?: boolean;
            };
          };
          Res: {
            Body: Models.Job;
          };
        }
        export namespace _jobId {
          export interface Params extends datasets._account._dataset.Params {
            jobId: string;
          }
          export interface Get {
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: Models.Job;
            };
          }
          export interface Delete {
            Req: {
              Query: {};
              Params: Params;
              Body: {};
            };
            Res: {
              Body: {};
            };
          }
          export namespace add {
            export interface Post {
              Req: {
                Query: {};
                Params: Params;
                Body: {};
              };
              Res: {
                Body: Models.Job;
              };
            }
          }
          export namespace start {
            export interface Post {
              Req: {
                Query: {};
                Params: Params;
                Body: { overwriteAll?: boolean };
              };
              Res: {
                Body: Models.Job;
              };
            }
          }
          export namespace reset {
            export interface Post {
              Req: {
                Query: {};
                Params: Params;
                Body: {};
              };
              Res: {
                Body: Models.Job;
              };
            }
          }

          export namespace _sourceFileId {
            export interface Params extends datasets._account._dataset.jobs._jobId.Params {
              sourceFileId: string;
            }
            export interface Delete {
              Req: {
                Query: {};
                Params: Params;
                Body: {};
              };
              Res: {
                Body: {};
              };
            }
          }
        }
      }
    }
  }
}

export namespace queries {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        since?: string;
        limit?: number;
        sortDirection?: "asc" | "desc";
        q?: string;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.Queries;
    };
  }

  export namespace _account {
    export interface Params {
      account: string;
    }
    export interface Get {
      Req: {
        Query: GenericQuery & {
          since?: string;
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
        };
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.Queries;
      };
    }

    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.QueryCreate;
      };
      Res: {
        Body: Models.Query;
      };
    }

    export namespace _query {
      export interface Params extends queries._account.Params {
        query: string;
        versionNr: string;
      }
      export interface Get {
        Req: {
          Query: { [queryArgument: string]: string } & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: Models.Query | string;
        };
      }

      export interface Patch {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Models.QueryMetaUpdate;
        };
        Res: {
          Body: Models.Query;
        };
      }

      export interface Post {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Models.QueryVersionUpdate;
        };
        Res: {
          Body: Models.Query;
        };
      }
      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }

      export namespace run {
        export interface Get {
          Req: {
            Query: {
              [queryArgument: string]: string;
            } & GenericQuery;
            Params: Params;
            Body: {
              [queryArgument: string]: string;
            };
          };
          Res: {
            Body: any;
          };
        }
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {
              [queryArgument: string]: string;
            };
          };
          Res: {
            Body: any;
          };
        }
      }
    }
  }
}

export namespace stories {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        since?: string;
        limit?: number;
        sortDirection?: "asc" | "desc";
        q?: string;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.Story[];
    };
  }

  export namespace _account {
    export interface Params {
      account: string;
    }
    export interface Get {
      Req: {
        Query: GenericQuery & {
          since?: string;
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
        };
        Params: Params;
        Body: {};
      };
      Res: {
        Body: Models.Story[];
      };
    }

    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: Models.StoryCreate;
      };
      Res: {
        Body: Models.Story;
      };
    }

    export namespace _story {
      export interface Params extends stories._account.Params {
        story: string;
      }
      export interface Get {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: Models.Story;
        };
      }

      export interface Patch {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Models.StoryUpdate;
        };
        Res: {
          Body: Models.Story;
        };
      }

      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
      export namespace copy {
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {
              toAccount: string;
            };
          };
          Res: {
            Body: Models.Story;
          };
        }
      }
      export namespace chown {
        export interface Post {
          Req: {
            Query: {} & GenericQuery;
            Params: Params;
            Body: {
              toAccount: string;
            };
          };
          Res: {
            Body: Models.Story;
          };
        }
      }
      export namespace banner {
        export interface Get {
          Req: {
            Query: {
              v?: number;
              w?: number;
              h?: number;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Story;
          };
        }
        export interface Post {
          Req: {
            Query: GenericQuery & {
              verbose?: string;
            };
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Story;
          };
        }

        export interface Delete {
          Req: {
            Query: {};
            Params: Params;
            Body: {};
          };
          Res: {
            Body: Models.Story;
          };
        }
      }
    }
  }
}

export namespace search {
  export namespace datasets {
    export interface Get {
      Req: {
        Query: GenericQuery & {
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
          q?: string;
          offset?: number;
          limit?: number;
        };
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.Dataset[];
      };
    }
  }
  export namespace stories {
    export interface Get {
      Req: {
        Query: GenericQuery & {
          offset?: number;
          limit?: number;
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
          q?: string;
        };
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.Story[];
      };
    }
  }
  export namespace queries {
    export interface Get {
      Req: {
        Query: GenericQuery & {
          offset?: number;
          limit?: number;
          sortBy?: "createdAt" | "updatedAt" | "name";
          sortDirection?: "asc" | "desc";
          q?: string;
        };
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.Queries;
      };
    }
  }
}

export namespace _some {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        q?: string;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: {
        datasets: Models.Dataset[];
        stories: Models.Story[];
        queries: Models.Query[];
      };
    };
  }

  export namespace _account {
    export interface Get {
      Req: {
        Query: GenericQuery & {
          q?: string;
          exclude?: string; // supports multiple values
        };
        Params: {};
        Body: {};
      };
      Res: {
        Body: {
          datasets: Models.Dataset[];
          stories: Models.Story[];
          queries: Models.Query[];
        };
      };
    }
  }
}

export namespace _internalService {
  export namespace _serviceId {
    export namespace _filestorageId {
      interface Params {
        serviceId: string;
        filestorageId: string;
      }
      export interface Get {
        Req: {
          Query: {};
          Params: Params;
          Body: {};
        };
        Res: {
          Body: any;
        };
      }
    }
  }
}

//Used by route '/me' and route '/accounts/<me-name>'
export namespace account {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        verbose?: "";
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.Account;
    };
  }
  export interface Patch {
    Req: {
      Query: GenericQuery & {
        verbose?: string | null;
      };
      Params: {};
      Body: Models.AccountUpdate;
    };
    Res: {
      Body: Models.Account;
    };
  }
  export interface Delete {
    Req: {
      Query: {} & GenericQuery;
      Params: {};
      Body: {};
    };
    Res: {
      Body: {};
    };
  }
  export namespace orgs {
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.Org[];
      };
    }
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: Models.AccountUpdate;
      };
      Res: {
        Body: Models.Org;
      };
    }
  }
  export namespace members {
    export namespace _member {
      export interface Params {
        member: string;
      }
      export interface Get {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: Models.OrgMember;
        };
      }
      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
      export interface Patch {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {
            role: Models.OrgRole;
          };
        };
        Res: {
          Body: Models.OrgMember;
        };
      }
    }
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.OrgMember[];
      };
    }
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: {
          accountName: string;
          role: Models.OrgRole;
        };
      };
      Res: {
        Body: Models.OrgMember;
      };
    }
  }

  export namespace tokens {
    export namespace _tokenId {
      export interface Params {
        tokenId: string;
      }
      export interface Get {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: Models.Token;
        };
      }
      export interface Patch {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: Partial<Models.Token>;
        };
        Res: {
          Body: Models.Token;
        };
      }

      export interface Delete {
        Req: {
          Query: {} & GenericQuery;
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
    }
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: {};
      };
      Res: {
        Body: Models.Token[];
      };
    }
    export interface Post {
      Req: {
        Query: {} & GenericQuery;
        Params: {};
        Body: Models.CreateToken;
      };
      Res: {
        Body: Models.Token;
      };
    }
  }
}

export import me = account;

export namespace accounts {
  export import _account = account;
  export interface Get {
    Req: {
      Query: {
        type?: Models.AccountType;
        q?: string;
        offset?: number;
        substring?: string;
        sortBy?: "createdAt" | "updatedAt" | "accountNameLower";
        sortDirection?: "asc" | "desc";
        limit?: number;
      } & GenericQuery;
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.Account[];
    };
  }
}

export namespace topics {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        q?: string;
        since?: string;
        limit?: number;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.Topic[];
    };
  }

  export interface Put {
    Req: {
      Query: {} & GenericQuery;
      Params: {};
      Body: Models.TopicUpdates;
    };
    Res: {
      Body: Models.Topic[];
    };
  }

  export interface Patch {
    Req: {
      Query: {} & GenericQuery;
      Params: {};
      Body: Models.TopicUpdates;
    };
    Res: {
      Body: Models.Topic[];
    };
  }

  export namespace _topicId {
    export interface Params {
      topicId: string;
    }
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: {
          topicId: string;
        };
        Body: {};
      };
      Res: {
        Body: Models.Topic;
      };
    }

    export interface Patch {
      Req: {
        Query: {} & GenericQuery;
        Params: {
          topicId: string;
        };
        Body: Models.TopicUpdate;
      };
      Res: {
        Body: Models.Topic;
      };
    }

    export interface Delete {
      Req: {
        Query: {} & GenericQuery;
        Params: {
          topicId: string;
        };
        Body: {};
      };
      Res: {
        Body: {};
      };
    }
  }
}
export namespace redirect {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        iri?: string;
      };
      Params: {
        iri?: string;
      };
      Body: {};
    };
    Res: {
      Body: {};
    };
  }
}

export namespace search {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        q?: string;
        accountName?: string;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.SearchResults;
    };
  }
}

export namespace shortUrl {
  export interface Get {
    Req: {
      Query: GenericQuery & {
        shortUrl: string;
      };
      Params: {};
      Body: {};
    };
    Res: {
      Body: Models.ShortUrl;
    };
  }
  export interface Post {
    Req: {
      Query: {} & GenericQuery;
      Params: {};
      Body: {
        longUrl: string;
      };
    };
    Res: {
      Body: Models.ShortUrl;
    };
  }
}
export namespace s {
  export namespace _short {
    export interface Params {
      short: string;
    }
    export interface Get {
      Req: {
        Query: {} & GenericQuery;
        Params: Params;
        Body: {};
      };
      Res: {
        Body: {};
      };
    }
  }
}

export namespace web {
  export interface Params {}
  export namespace auth {
    export interface Params {}
    export namespace oauth {
      export interface Params {}
      export interface Get {
        Req: {
          Query: GenericQuery & { from: Models.RegisterOrLogin };
          Params: Params;
          Body: {};
        };
        Res: {
          Body: {};
        };
      }
    }
  }
}
