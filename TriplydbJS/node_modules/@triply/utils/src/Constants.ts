import { extname } from "path";
import { NTriplyTerm } from "./";

import * as url from "url";

export const HDT_MIN_STATEMENTS = 1 as const;
export const HDT_MAX_STATEMENTS = 10000 as const;
export const SERVICE_TYPES = ["sparql", "sparql-jena", "elasticsearch"] as const;
export const QUERY_TYPES = ["sparql", "search"] as const;
export const MAX_EXAMPLE_RESOURCES = 30 as const;
export const MAX_DATASET_NAME_LENGTH = 40 as const;
export const MAX_ACCOUNT_NAME_LENGTH = 40 as const;
export const MAX_SERVICE_NAME_LENGTH = 40 as const;
export const MAX_QUERY_NAME_LENGTH = 40 as const;
export const MAX_STORY_NAME_LENGTH = 40 as const;
export const MAX_GRAPHS_ON_LANDING_PAGE = 10 as const; // specify the number of graphs shown on the landing page

export const BACKWARD_SUBJECTS_PAGE_SIZE = 40 as const;
export const FORWARD_OBJECT_PAGE_SIZE = 10 as const;
export const BACKWARD_PREDICATES_PAGE_SIZE = 10 as const;
export const FORWARD_PREDICATES_PAGE_SIZE = 50 as const;

/**
 * Maximum number of rows returned by Virtuoso for a SELECT query.
 * For a CONSTRUCT query, the maximum is exactly 1 higher.
 * (https://github.com/openlink/virtuoso-opensource/pull/940)
 *
 * Changing the value here also configures Virtuoso.
 * The virtuoso default is 10_000.
 *
 * Page size limit: https://issues.triply.cc/issues/4692
 * Construct queries: https://issues.triply.cc/issues/4788
 */
export const SPARQL_RESULT_SET_MAX_ROWS = 10_000 as const;
export const SPARQL_RESULT_DEFAULT_PAGE_SIZE = 100 as const;
export const SPARQL_RETRY_CONSTRUCT_SHRINK_FACTOR = 0.8 as const;

export const AVATAR_SIZE_LIMIT = "5mb" as const;

// file upload error messages (used in both console and api)
export const GENERIC_FILE_UPLOAD_ERROR_MESSAGE = "An error occurred while uploading the file." as const;
export const DUPLICATE_ASSETNAME_ERROR_MESSAGE = "An asset with this name has already been uploaded." as const;

export const CANT_CREATE_ZERO_GRAPH_SERVICE_MESSAGE = "Cannot create a service for a dataset without graphs.";

export const NO_ACCOUNTS_LEFT_MESSAGE = "There are currently no more available accounts.";
export const SUBSCRIPTIONS_PAGE = "https://triply.cc/subscriptions";

export const SPARQL_VARNAME_CHARS =
  "[0-9a-zA-Z_\u00C0-\u00D6\u00D8-\u00F6\u0370-\u037d\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]";

// prettier-ignore
export const SUPPORTED_EXTENSIONS = [

  // ## archive/compressed formats.
  "gz", "bz2", "xz", "tar", "zip", "tgz",

  // Disabled for now (waiting for lib fix in the JSON-LD Streaming Parser library).
  // Uncomment the following line when #3294 is fixed.
  // "jsonld",

  // ## rdf-xml
  // https://www.w3.org/TR/rdf-syntax-grammar/ :      It is recommended that RDF/XML files have the extension ".rdf" (all lowercase) on all platforms.
  "rdf",
  // https://issues.triply.cc/issues/3450 : rdfs is commonly used to denote rdf-xml data
  "rdfs",
  // https://www.w3.org/TR/owl-xml-serialization:     It is recommended that OWL XML Serialization files have the extension .owx (all lowercase) on all platforms.
  // https://www.w3.org/TR/owl2-xml-serialization/:   It is recommended that OWL XML Serialization files have the extension .owx (all lowercase) on all platforms.
  'owx',
  //  including .owl since it's very common
  'owl',

  // ## turtle family
  // https://www.w3.org/TR/n-triples/ :               It is recommended that N-Triples files have the extension ".nt" (all lowercase) on all platforms.
  "nt",
  // https://www.w3.org/TR/turtle/ :                  It is recommended that Turtle files have the extension ".ttl" (all lowercase) on all platforms.
  "ttl",
  // https://www.w3.org/TR/n-quads/ :                 It is recommended that N-Quads files have the extension ".nq" (all lowercase) on all platforms.
  "nq",
  // https://www.w3.org/TR/trig/ :                    It is recommended that TriG files have the extension ".trig" (all lowercase) on all platforms.
  "trig",
  // https://www.w3.org/TeamSubmission/n3/ :          It is recommended that Notation3 files have the extension ".n3" (all lowercase) on all platforms.
  "n3"
] as const;
export type SupportedExtension = typeof SUPPORTED_EXTENSIONS[number];

const imageExtensions = [".jpg", ".jpeg", ".png", ".gif", ".svg", ".bmp", ".tiff"];
export interface ObjectFilter<T> {
  value?: string;
  language?: string;
  datatype?: string;
  termType?: NTriplyTerm["termType"];
  validationFunction?: (term: T) => boolean;
}

export type QueryPattern<T extends { termType: NTriplyTerm["termType"] }> = [
  string?,
  ObjectFilter<T>?,
  string?,
  ObjectFilter<T>?
];

export const RESOURCE_WIDGET_PATTERNS = {
  IMAGE_PATTERNS: <QueryPattern<NTriplyTerm>[]>[
    ["http://xmlns.com/foaf/0.1/depiction", null, "http://xmlns.com/foaf/0.1/thumbnail", null],
    ["https://schema.org/image", null, "https://schema.org/contentUrl"],
    ["https://schema.org/thumbnail", null, "https://schema.org/contentUrl"],
    ["http://www.w3.org/1999/02/22-rdf-syntax-ns#type", { value: "https://schema.org/ImageObject" }],
    ["http://xmlns.com/foaf/0.1/depiction", null],
    ["http://xmlns.com/foaf/0.1/thumbnail", null],
    ["https://schema.org/image"],
    [null, { datatype: "https://triply.cc/triply/def/imageURI" }],
    [
      null,
      {
        datatype: "http://www.w3.org/2001/XMLSchema#anyURI",
        validationFunction: (term: NTriplyTerm) =>
          imageExtensions.indexOf(extname(url.parse(term.value).pathname || "").toLowerCase()) >= 0 ||
          imageExtensions.indexOf(extname(url.parse(term.value).search || "").toLowerCase()) >= 0,
      },
    ],
  ],
  LABEL_PATTERNS: <QueryPattern<NTriplyTerm>[]>[
    ["http://www.w3.org/2000/01/rdf-schema#label", { language: "en" }],
    ["http://www.w3.org/2000/01/rdf-schema#label", undefined],
    ["http://xmlns.com/foaf/0.1/name", { language: "en" }],
    ["http://xmlns.com/foaf/0.1/name", undefined],
    ["https://schema.org/name", { language: "en" }],
    ["https://schema.org/name", undefined],
    ["http://www.w3.org/2004/02/skos/core#prefLabel", { language: "en" }],
    ["http://www.w3.org/2004/02/skos/core#prefLabel", undefined],
    ["http://purl.org/dc/terms/title", { language: "en" }],
    ["http://purl.org/dc/terms/title", undefined],
    ["http://purl.org/dc/elements/1.1/title", { language: "en" }],
    ["http://purl.org/dc/elements/1.1/title", undefined],
  ],
  GEO_PATTERNS: <QueryPattern<NTriplyTerm>[]>[
    ["http://www.opengis.net/ont/geosparql#asWKT", undefined],
    ["http://www.opengis.net/ont/geosparql#hasGeometry", undefined, "http://www.opengis.net/ont/geosparql#asWKT"],
  ],
  LAT_PATTERNS: <QueryPattern<NTriplyTerm>[]>[["http://www.w3.org/2003/01/geo/wgs84_pos#lat", undefined]],
  LONG_PATTERNS: <QueryPattern<NTriplyTerm>[]>[["http://www.w3.org/2003/01/geo/wgs84_pos#long", undefined]],
  AUDIO_PATTERNS: <QueryPattern<NTriplyTerm>[]>[
    ["https://schema.org/audio"],
    ["http://www.w3.org/1999/02/22-rdf-syntax-ns#type", { value: "https://schema.org/AudioObject" }],
  ],
  VIDEO_PATTERNS: <QueryPattern<NTriplyTerm>[]>[
    ["https://schema.org/video"],
    ["http://www.w3.org/1999/02/22-rdf-syntax-ns#type", { value: "https://schema.org/VideoObject" }],
  ],
  MEDIA_PATTERNS: <QueryPattern<NTriplyTerm>[]>[["https://schema.org/contentUrl"]],
  MEDIA_ENCODING_PATTERNS: <QueryPattern<NTriplyTerm>[]>[["https://schema.org/encodingFormat"]],
};

export const METADATA_IRI_FOR_CLASS_UNKNOWN = "UNKNOWN:unknown" as const;
