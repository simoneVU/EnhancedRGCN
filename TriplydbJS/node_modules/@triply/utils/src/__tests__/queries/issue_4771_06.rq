prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
construct {
  ?childShape sh:property ?propertyShape.
  ?nodeShape
    a sh:nodeShape;
    rdfs:isDefinedBy ?graph;
    sh:closed true;
    sh:ignoredProperties (rdf:type).
  ?propertyShape
    a sh:PropertyShape;
    rdfs:isDefinedBy ?graph;
    # sh:class ?class;  # TODO: Disabled because of self-containedness;
    sh:datatype ?datatype;
    sh:maxCount ?max;
    sh:minCount ?min;
    sh:minLength ?length;
    sh:name ?name;
    sh:in ?values;
    sh:nodeKind ?kind.
} where {
  {
    # By default, class instance are IRIs.
    ?propertyShape sh:class [].
    minus {
      ?nodeShape sh:nodeKind [].
    }
    bind(sh:IRI as ?kind)
  } union {
    # By default, classes copy OWL value lists.
    ?propertyShape sh:class ?class.
    minus {
      ?nodeShape sh:in [].
    }
    ?class owl:oneOf ?values.
  } union {
    # Datatypes must be literals.
    ?propertyShape sh:datatype [].
    bind(sh:Literal as ?kind)
    bind(1 as ?length)
  } union {
    # When language tags are specified, the datatype must be rdf:langString.
    ?propertyShape sh:languageIn [].
    bind(rdf:langString as ?datatype)
  } union {
    # Property shapes are commonly related to an OWL property.
    ?propertyShape sh:path [].
  } union {
    # As a default, copy the upper cardinality bound over from OWL.
    ?propertyShape sh:path ?property.
    ?restriction owl:onProperty ?property.
    {
      ?restriction owl:cardinality ?upper.
    } union {
      ?restriction owl:maxQualifiedCardinality ?upper.
    }
    bind(xsd:integer(?upper) as ?max)
    minus {
      ?propertyShape sh:maxCount [].
    }
  } union {
    # As a default, copy the lower cardinality bound over from OWL.
    ?propertyShape sh:path ?property.
    ?restriction owl:onProperty ?property.
    {
      ?restriction owl:cardinality ?lower.
    } union {
      ?restriction owl:minQualifiedCardinality ?lower.
    }
    bind(xsd:integer(?lower) as ?min)
    minus {
      ?propertyShape sh:minCount [].
    }
  } union {
    # Default name for property shapes for controlled properties.
    ?propertyShape sh:path/rdfs:label ?name.
    minus {
      ?propertyShape sh:name ?name.
    }
  } union {
    # By default:
    #   - datatype properties derive their sh:datatype from rdfs:range,
    #   - datatype properties set the sh:nodeKind to sh:Literal,
    #   - object properties derive their sh:class from rdfs:range,
    #   - object properties set the sh:nodeKind to sh:IRI.
    ?propertyShape sh:path ?property.
    {
      ?property a owl:DatatypeProperty;
                   rdfs:range ?datatype.
      minus {
        ?propertyShape sh:datatype [].
      }
      bind(sh:Literal as ?kind)
    } union {
      ?property a owl:ObjectProperty;
                       rdfs:range ?class.
      minus {
        ?propertyShape sh:class [].
      }
      bind(sh:IRI as ?kind)
    }
  } union {
    # Shapes relate to the graph in which they are defined.
    select distinct ?nodeShape ?graph {
      graph ?graph {
        {
          ?nodeShape sh:property ?propertyShape.
        }  union {
          # Node shapes are commonly related to an OWL class.
          ?nodeShape sh:targetClass [].
        }
        minus {
          ?nodeShape sh:ignoredProperties (rdf:type).
        }
        minus {
          ?nodeShape sh:targetSubjectsOf [].
        }
      }
    }
  } union {
    # Copy all property shapes that appear in the node shape hierarchy.
    # This is needed because sh:closed is DTAI.
    ?childShape sh:targetClass ?child.
    ?child rdfs:subClassOf+ ?parent.
    ?parentShape
      sh:property ?propertyShape;
      sh:targetClass ?parent.
  }
}